version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: orthanc_project_postgres # Nouveau nom pour éviter conflits résiduels
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Lu depuis .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Expose Postgres sur l'hôte
    networks:
      - orthanc_project_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  orthanc:
    image: orthancteam/orthanc:24.3.2 # Ou dernière stable
    container_name: orthanc_project_orthanc # Nouveau nom
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Config PostgreSQL via variables d'environnement
      ORTHANC__POSTGRESQL__ENABLE_INDEX: "true"
      ORTHANC__POSTGRESQL__ENABLE_STORAGE: "false"
      ORTHANC__POSTGRESQL__HOST: postgres # Nom du service Docker
      ORTHANC__POSTGRESQL__PORT: 5432
      ORTHANC__POSTGRESQL__DATABASE: ${POSTGRES_DB}
      ORTHANC__POSTGRESQL__USERNAME: ${POSTGRES_USER}
      ORTHANC__POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      ORTHANC__POSTGRESQL__LOCK: "true"

      # Services Web Orthanc
      ORTHANC__DICOM_WEB__ENABLED: "true"
      ORTHANC__DICOM_WEB__ROOT: "/dicom-web/"
      ORTHANC__WADO__ENABLED: "true"
      ORTHANC__WADO__ROOT: "/wado"

      # CORS pour autoriser le frontend Next.js (tournant sur localhost:3000)
      # Utile si Cornerstone appelle directement WADO, sinon appels via API Route Next.js
      ORTHANC__HTTP_CORS_ALLOW_ORIGIN: "http://localhost:3000"
      ORTHANC__HTTP_CORS_ALLOW_HEADERS: "Content-Type,Authorization"
      ORTHANC__HTTP_CORS_ENABLED: "true"

      ORTHANC__REMOTE_ACCESS_ALLOWED: "true"
      ORTHANC__AUTHENTICATION_ENABLED: "false" # Garder simple pour le dev

      VERBOSE_ENABLED: "true"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
    ports:
      - "8042:8042" # API REST / Explorer
      - "4242:4242" # DICOM
    networks:
      - orthanc_project_net
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: orthanc_project_minio # Nouveau nom
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER} # Lu depuis .env
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD} # Lu depuis .env
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console Web
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - orthanc_project_net
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  orthanc_data:
    driver: local
  minio_data:
    driver: local

networks:
  orthanc_project_net:
    driver: bridge