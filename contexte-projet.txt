Directory structure:
└── noreyni03-orthanc-project.git/
    ├── README.md
    ├── contexte.txt
    ├── docker-compose.yml
    ├── eslint.config.mjs
    ├── next.config.mjs
    ├── package.json
    ├── postcss.config.js
    ├── postcss.config.mjs
    ├── tailwind.config.js
    ├── tsconfig.json
    ├── prisma/
    │   ├── schema.prisma
    │   ├── seed.ts
    │   ├── tsconfig.json
    │   └── migrations/
    │       ├── migration_lock.toml
    │       └── 20250330130933_init/
    │           └── migration.sql
    ├── public/
    │   └── images/
    └── src/
        ├── app/
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── page.tsx
        │   ├── (app)/
        │   │   └── admin/
        │   │       └── users/
        │   │           └── page.tsx
        │   ├── api/
        │   │   ├── admin/
        │   │   │   ├── roles/
        │   │   │   │   └── route.ts
        │   │   │   └── users/
        │   │   │       ├── route.ts
        │   │   │       └── [userId]/
        │   │   │           └── route.ts
        │   │   └── auth/
        │   │       ├── [...nextauth]/
        │   │       │   └── route.ts
        │   │       └── register/
        │   │           └── route.ts
        │   └── auth/
        │       ├── login/
        │       │   └── page.tsx
        │       └── signup/
        │           └── page.tsx
        └── components/
            ├── Header.tsx
            ├── SessionProviderWrapper.tsx
            ├── withAuth.tsx
            └── auth/
                ├── AuthLayout.tsx
                ├── Button.tsx
                ├── Input.tsx
                └── SocialButton.tsx


Files Content:

================================================
FILE: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================
FILE: contexte.txt
================================================
**Description Actualisée du Projet : `orthanc-project`**

**Introduction**

`orthanc-project` est un Système de Gestion d'Imagerie Médicale (SGIM) web innovant et open-source, entièrement construit sur la plateforme **Next.js**. Il vise à fournir une solution moderne, performante, sécurisée et esthétiquement aboutie pour répondre aux défis complexes de la gestion des images DICOM dans les établissements de santé. En s'intégrant de manière transparente avec le serveur PACS **Orthanc**, le projet offre une interface utilisateur intuitive et des fonctionnalités robustes pour optimiser les flux de travail des professionnels de santé.

**Contexte et Problématique**

Le domaine de l'imagerie médicale est confronté à une volumétrie de données croissante, à des impératifs stricts de sécurité et de conformité (RGPD, etc.), à des difficultés d'interopérabilité entre systèmes (SIH/DPI), et à un besoin d'accessibilité accrue pour les cliniciens. `orthanc-project` aborde ces points en proposant une alternative flexible et centrée sur l'utilisateur aux solutions existantes, en tirant parti d'une stack technologique cohérente et moderne basée sur l'écosystème JavaScript/TypeScript.

**Objectif Général**

L'objectif est de fournir une **plateforme web fullstack unique et intégrée pour la gestion complète du cycle de vie des images médicales**, depuis l'acquisition et le stockage jusqu'à la recherche, la visualisation interactive et le partage sécurisé, améliorant ainsi l'efficacité diagnostique et la collaboration médicale.

**Architecture Technique**

`orthanc-project` adopte une architecture **FullStack Next.js** :

*   **Framework :** **Next.js 14+** (utilisant React 18+) avec le **App Router**. Gère à la fois :
    *   Le **Frontend :** Interface utilisateur réactive et moderne (rendue principalement côté client).
    *   Le **Backend :** Logique métier, accès aux données et intégrations via les **API Routes** de Next.js.
*   **Langage :** **TypeScript** sur l'ensemble de la stack pour la robustesse et la maintenabilité.
*   **Base de Données :** **PostgreSQL** (via Docker) pour les données applicatives (utilisateurs, rôles, sessions, etc.).
*   **ORM :** **Prisma** pour une interaction typée et sécurisée avec la base de données PostgreSQL.
*   **Authentification :** **NextAuth.js (Auth.js v5)** configuré avec le **PrismaAdapter** (sessions en BDD) et le **GoogleProvider** (OAuth2).
*   **Serveur PACS :** **Orthanc** (via Docker), utilisé comme moteur de stockage DICOM et fournisseur d'API REST / DICOMweb.
*   **Visualisation DICOM :** **Cornerstone.js** intégré au frontend Next.js.
*   **Stockage Objet (Dev) :** **MinIO** (via Docker) pour les besoins de développement (ex: stockage futur de rapports, exports).
*   **Styling :** **Tailwind CSS** (v3 stable recommandée) pour une interface utilisateur moderne et personnalisable.
*   **Animation (Optionnel) :** **Framer Motion** pour des animations fluides et complexes.
*   **Environnement :** **Docker et Docker Compose** pour gérer les services externes (Postgres, Orthanc, MinIO) de manière isolée et reproductible.

**Fonctionnalités Clés (MVP et Vision)**

La plateforme `orthanc-project` vise à inclure :

*   **Page d'Accueil Révolutionnaire :** Une vitrine publique moderne et animée présentant le projet.
*   **Authentification Sécurisée :** Connexion via Google OAuth2 et potentiellement locale (future), gérée par NextAuth.js.
*   **Gestion des Utilisateurs et Rôles :** Interface d'administration (protégée) pour gérer les utilisateurs et attribuer des rôles (Admin, Radiologue, etc.) stockés via Prisma.
*   **Recherche d'Images :** Interface pour rechercher des études/séries dans Orthanc via des API Routes Next.js interrogeant l'API Orthanc.
*   **Visualiseur DICOM Intégré :** Affichage interactif des images DICOM avec Cornerstone.js (zoom, pan, fenêtrage) dans le navigateur.
*   **Importation Manuelle :** Interface utilisateur et API Route pour permettre l'upload sécurisé de fichiers DICOM vers Orthanc.
*   **(Futures) Fonctionnalités Avancées :** Outils de mesure/annotation, partage sécurisé, collaboration, intégration SIH/DPI (HL7 FHIR/DICOMweb), audit log détaillé, etc.

**Valeur Ajoutée**

*   **Stack Unifiée :** Utilisation de JavaScript/TypeScript sur l'ensemble du projet (frontend, backend API Routes) simplifiant le développement et la maintenance.
*   **Expérience Développeur Moderne :** Bénéficie de l'écosystème riche de Next.js, React, Prisma et Tailwind CSS.
*   **Performance Web :** Exploite les optimisations de Next.js pour une interface rapide et réactive.
*   **Sécurité Intégrée :** Profite des mécanismes de NextAuth.js et des bonnes pratiques de développement web sécurisé.
*   **Flexibilité Open Source :** Combine la flexibilité d'Orthanc avec la puissance de l'écosystème Node.js/React.

`orthanc-project`, dans cette nouvelle itération, représente une approche résolument moderne et intégrée pour construire un SGIM performant et convivial, prêt à évoluer pour répondre aux exigences complexes du secteur de la santé.

---


================================================
FILE: docker-compose.yml
================================================
version: '3.8'

services:
  postgres:
    image: postgres:16
    container_name: orthanc_project_postgres # Nouveau nom pour éviter conflits résiduels
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD} # Lu depuis .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Expose Postgres sur l'hôte
    networks:
      - orthanc_project_net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  orthanc:
    image: orthancteam/orthanc:24.3.2 # Ou dernière stable
    container_name: orthanc_project_orthanc # Nouveau nom
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      # Config PostgreSQL via variables d'environnement
      ORTHANC__POSTGRESQL__ENABLE_INDEX: "true"
      ORTHANC__POSTGRESQL__ENABLE_STORAGE: "false"
      ORTHANC__POSTGRESQL__HOST: postgres # Nom du service Docker
      ORTHANC__POSTGRESQL__PORT: 5432
      ORTHANC__POSTGRESQL__DATABASE: ${POSTGRES_DB}
      ORTHANC__POSTGRESQL__USERNAME: ${POSTGRES_USER}
      ORTHANC__POSTGRESQL__PASSWORD: ${POSTGRES_PASSWORD}
      ORTHANC__POSTGRESQL__LOCK: "true"

      # Services Web Orthanc
      ORTHANC__DICOM_WEB__ENABLED: "true"
      ORTHANC__DICOM_WEB__ROOT: "/dicom-web/"
      ORTHANC__WADO__ENABLED: "true"
      ORTHANC__WADO__ROOT: "/wado"

      # CORS pour autoriser le frontend Next.js (tournant sur localhost:3000)
      # Utile si Cornerstone appelle directement WADO, sinon appels via API Route Next.js
      ORTHANC__HTTP_CORS_ALLOW_ORIGIN: "http://localhost:3000"
      ORTHANC__HTTP_CORS_ALLOW_HEADERS: "Content-Type,Authorization"
      ORTHANC__HTTP_CORS_ENABLED: "true"

      ORTHANC__REMOTE_ACCESS_ALLOWED: "true"
      ORTHANC__AUTHENTICATION_ENABLED: "false" # Garder simple pour le dev

      VERBOSE_ENABLED: "true"
    volumes:
      - orthanc_data:/var/lib/orthanc/db
    ports:
      - "8042:8042" # API REST / Explorer
      - "4242:4242" # DICOM
    networks:
      - orthanc_project_net
    restart: unless-stopped

  minio:
    image: minio/minio:latest
    container_name: orthanc_project_minio # Nouveau nom
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER} # Lu depuis .env
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD} # Lu depuis .env
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000" # API
      - "9001:9001" # Console Web
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - orthanc_project_net
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  orthanc_data:
    driver: local
  minio_data:
    driver: local

networks:
  orthanc_project_net:
    driver: bridge


================================================
FILE: eslint.config.mjs
================================================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;



================================================
FILE: next.config.mjs
================================================
// next.config.mjs

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true, // Option activée par défaut
  images: {
    // Configuration pour autoriser les images externes
    remotePatterns: [
      {
        protocol: 'https', // Protocol utilisé par les images Google
        hostname: 'lh3.googleusercontent.com', // Nom d'hôte pour les images de profil Google
        // port: '', // Le port par défaut (443 pour https) est implicite
        // pathname: '/a/**', // Optionnel: Pour restreindre les chemins si nécessaire
      },
      // Ajoutez ici d'autres objets si vous utilisez d'autres sources d'images externes
      // Exemple:
      // {
      //   protocol: 'https',
      //   hostname: 'autre-domaine.com',
      // },
    ],
  },
  // Ajoutez d'autres options de configuration Next.js ici si nécessaire
  // Exemple:
  // env: {
  //   MY_VAR: process.env.MY_VAR,
  // },
};

// Utiliser export default car c'est un module ES (.mjs)
export default nextConfig;


================================================
FILE: package.json
================================================
{
  "name": "orthanc-project",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@auth/prisma-adapter": "^2.8.0",
    "@prisma/client": "^5.22.0",
    "bcryptjs": "^2.4.3",
    "framer-motion": "^12.6.2",
    "geist": "^1.3.1",
    "next": "14.2.5",
    "next-auth": "^5.0.0-beta.19",
    "react": "^18",
    "react-dom": "^18",
    "react-intersection-observer": "^9.16.0"
  },
  "devDependencies": {
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "autoprefixer": "^10.4.21",
    "eslint": "^8",
    "eslint-config-next": "14.2.5",
    "postcss": "^8.5.3",
    "prisma": "^5.18.0",
    "tailwindcss": "^3.4.17",
    "ts-node": "^10.9.2",
    "typescript": "^5"
  },
  "prisma": {
    "seed": "ts-node -P prisma/tsconfig.json prisma/seed.ts"
  }
}


================================================
FILE: postcss.config.js
================================================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}



================================================
FILE: postcss.config.mjs
================================================
// postcss.config.mjs (ou .js)
export default {
  plugins: {
    tailwindcss: {}, // C'est la clé ici ! Pas @tailwindcss/postcss
    autoprefixer: {},
  },
};


================================================
FILE: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "src/**/*.ts", "src/**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules", "prisma"]
}


================================================
FILE: prisma/schema.prisma
================================================
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // Utilise la variable d'environnement définie dans .env
  url      = env("DATABASE_URL")
}

// Modèle Utilisateur (Adapté pour NextAuth + Rôles)
model User {
  id            String    @id @default(uuid())
  name          String?                     // Requis par NextAuth (peut être dérivé de l'email ou Google)
  email         String    @unique             // Requis par NextAuth
  emailVerified DateTime?                   // Requis par NextAuth
  image         String?                     // Requis par NextAuth (URL de l'avatar)
  password      String?                     // Mot de passe local, optionnel
  provider      String    @default("local") // 'local' ou 'google' (utile pour votre logique)
  providerId    String?   @unique           // ID unique du provider OAuth (utile pour lier les comptes)

  enabled       Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // --- Champs requis par NextAuth Prisma Adapter ---
  accounts      Account[]                   // Comptes OAuth liés
  sessions      Session[]                   // Sessions NextAuth

  // --- Votre relation personnalisée ---
  roles         Role[]                      // Relation Many-to-Many avec Role

  @@index([email])
}

// Modèle Rôle personnalisé
model Role {
  id            Int       @id @default(autoincrement())
  name          String    @unique // Ex: ADMIN, RADIOLOGIST, TECHNICIAN
  users         User[]    // Relation Many-to-Many avec User
}


// --- Modèles requis par NextAuth Prisma Adapter ---

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  // Relation avec User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId]) // Clé primaire composite
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  // Relation avec User
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token]) // Clé primaire composite
}


================================================
FILE: prisma/seed.ts
================================================
// prisma/seed.ts
import { PrismaClient, Prisma } from '@prisma/client';
// Importer une librairie pour hacher le mot de passe (la même que vous utiliserez pour l'auth locale si vous l'implémentez)
// Ici, on utilise bcryptjs comme exemple. Installez-le : npm install bcryptjs @types/bcryptjs --save-dev
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();

// Définir les rôles de base
const rolesToCreate: Prisma.RoleCreateInput[] = [
  { name: 'ADMIN' },
  { name: 'RADIOLOGIST' },
  { name: 'TECHNICIAN' },
  { name: 'PHYSICIAN' }, // ou Medecin
  { name: 'SECRETARY' }, // ou SecMed
  // Ajoutez d'autres rôles si nécessaire
];

// Définir l'utilisateur admin initial
const adminEmail = 'admin@orthancproject.com'; // Changez ceci si vous voulez
const adminPassword = 'adminpassword'; // Changez ceci pour quelque chose de plus sûr, même pour le seed

async function main() {
  console.log(`Start seeding ...`);

  // Créer les rôles (ignorer s'ils existent déjà)
  for (const roleData of rolesToCreate) {
    const role = await prisma.role.upsert({
      where: { name: roleData.name },
      update: {},
      create: roleData,
    });
    console.log(`Created or found role: ${role.name}`);
  }

  // Récupérer l'ID du rôle ADMIN
  const adminRole = await prisma.role.findUnique({
    where: { name: 'ADMIN' },
  });

  if (!adminRole) {
    console.error('ADMIN role not found. Seeding admin user failed.');
    return;
  }

  // Hasher le mot de passe admin
  const hashedPassword = await bcrypt.hash(adminPassword, 10); // 10 = salt rounds

  // Créer l'utilisateur admin (ignorer s'il existe déjà par email)
  const adminUser = await prisma.user.upsert({
    where: { email: adminEmail },
    update: {}, // Ne rien mettre à jour s'il existe déjà
    create: {
      email: adminEmail,
      password: hashedPassword, // Stocker le mot de passe hashé
      name: 'Admin User', // Nom par défaut
      provider: 'local', // Indiquer que c'est un compte local
      enabled: true,
      emailVerified: new Date(), // Marquer comme vérifié pour le seed
      roles: {
        connect: { id: adminRole.id }, // Connecter au rôle ADMIN
      },
    },
  });

  console.log(`Created or found admin user: ${adminUser.email}`);

  console.log(`Seeding finished.`);
}

main()
  .catch(async (e) => {
    console.error(e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });


================================================
FILE: prisma/tsconfig.json
================================================
{
    "compilerOptions": {
      "sourceMap": true,
      "outDir": "dist",
      "strict": true,
      "lib": ["esnext"],
      "esModuleInterop": true,
      "module": "CommonJS",
      "moduleResolution": "node",
      "skipLibCheck": true,
      "resolveJsonModule": true,
      "isolatedModules": true
    },
    "include": ["./seed.ts"],
    "exclude": ["node_modules"]
  }


================================================
FILE: prisma/migrations/migration_lock.toml
================================================
# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "postgresql"


================================================
FILE: prisma/migrations/20250330130933_init/migration.sql
================================================
-- CreateTable
CREATE TABLE "User" (
    "id" TEXT NOT NULL,
    "name" TEXT,
    "email" TEXT NOT NULL,
    "emailVerified" TIMESTAMP(3),
    "image" TEXT,
    "password" TEXT,
    "provider" TEXT NOT NULL DEFAULT 'local',
    "providerId" TEXT,
    "enabled" BOOLEAN NOT NULL DEFAULT true,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "User_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Role" (
    "id" SERIAL NOT NULL,
    "name" TEXT NOT NULL,

    CONSTRAINT "Role_pkey" PRIMARY KEY ("id")
);

-- CreateTable
CREATE TABLE "Account" (
    "userId" TEXT NOT NULL,
    "type" TEXT NOT NULL,
    "provider" TEXT NOT NULL,
    "providerAccountId" TEXT NOT NULL,
    "refresh_token" TEXT,
    "access_token" TEXT,
    "expires_at" INTEGER,
    "token_type" TEXT,
    "scope" TEXT,
    "id_token" TEXT,
    "session_state" TEXT,

    CONSTRAINT "Account_pkey" PRIMARY KEY ("provider","providerAccountId")
);

-- CreateTable
CREATE TABLE "Session" (
    "sessionToken" TEXT NOT NULL,
    "userId" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL
);

-- CreateTable
CREATE TABLE "VerificationToken" (
    "identifier" TEXT NOT NULL,
    "token" TEXT NOT NULL,
    "expires" TIMESTAMP(3) NOT NULL,

    CONSTRAINT "VerificationToken_pkey" PRIMARY KEY ("identifier","token")
);

-- CreateTable
CREATE TABLE "_RoleToUser" (
    "A" INTEGER NOT NULL,
    "B" TEXT NOT NULL,

    CONSTRAINT "_RoleToUser_AB_pkey" PRIMARY KEY ("A","B")
);

-- CreateIndex
CREATE UNIQUE INDEX "User_email_key" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "User_providerId_key" ON "User"("providerId");

-- CreateIndex
CREATE INDEX "User_email_idx" ON "User"("email");

-- CreateIndex
CREATE UNIQUE INDEX "Role_name_key" ON "Role"("name");

-- CreateIndex
CREATE INDEX "Account_userId_idx" ON "Account"("userId");

-- CreateIndex
CREATE UNIQUE INDEX "Session_sessionToken_key" ON "Session"("sessionToken");

-- CreateIndex
CREATE INDEX "Session_userId_idx" ON "Session"("userId");

-- CreateIndex
CREATE INDEX "_RoleToUser_B_index" ON "_RoleToUser"("B");

-- AddForeignKey
ALTER TABLE "Account" ADD CONSTRAINT "Account_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "Session" ADD CONSTRAINT "Session_userId_fkey" FOREIGN KEY ("userId") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "_RoleToUser" ADD CONSTRAINT "_RoleToUser_A_fkey" FOREIGN KEY ("A") REFERENCES "Role"("id") ON DELETE CASCADE ON UPDATE CASCADE;

-- AddForeignKey
ALTER TABLE "_RoleToUser" ADD CONSTRAINT "_RoleToUser_B_fkey" FOREIGN KEY ("B") REFERENCES "User"("id") ON DELETE CASCADE ON UPDATE CASCADE;




================================================
FILE: src/app/globals.css
================================================
/* src/app/globals.css */
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  /* Default to dark mode values matching the theme */
  --background: #0a0a0a; /* Equivalent to slate-950 or near black */
  --foreground: #ededed; /* Light gray for text */

  /* You could define other theme colors here if needed */
  /* --primary: #06b6d4; */ /* Example: cyan-500 */
  /* --secondary: #3b82f6; */ /* Example: blue-500 */
}

/* Optional: Explicit Light Mode override if needed, */
/* but the design seems primarily dark */
/* @media (prefers-color-scheme: light) {
  :root {
    --background: #ffffff;
    --foreground: #171717;
  }
} */

body {
  background: var(--background);
  color: var(--foreground);
  /* Consider keeping GeistSans from layout.tsx for consistency,
     but Arial/Helvetica is also fine as a fallback */
  font-family: Arial, Helvetica, sans-serif;
  /* Improve text rendering */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Define animations within the utilities layer */
@layer utilities {
  /* Shake animation for errors */
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    10%, 30%, 50%, 70%, 90% { transform: translateX(-5px); }
    20%, 40%, 60%, 80% { transform: translateX(5px); }
  }
  .animate-shake {
    animation: shake 0.5s ease-in-out;
  }

  /* Fade-in animation */
   @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
   .animate-fade-in {
     animation: fadeIn 0.5s ease-out forwards;
   }

   /* Medical Glow animation for logo */
   @keyframes pulse-medical-glow {
     0%, 100% { filter: drop-shadow(0 0 3px theme('colors.cyan.400')); opacity: 1; }
     50% { filter: drop-shadow(0 0 8px theme('colors.cyan.300')); opacity: 0.8; }
   }
   /* Apply animation on hover of the parent group */
   .group-hover\:animate-pulse-medical-glow:hover svg {
     animation: pulse-medical-glow 1.5s ease-in-out infinite;
   }
   /* Allow applying directly too */
   .animate-pulse-medical-glow {
     animation: pulse-medical-glow 1.5s ease-in-out infinite;
   }

   /* Heartbeat animation for loading indicator */
   @keyframes pulse-heartbeat {
     0% { transform: scale(1); opacity: 0.7; }
     50% { transform: scale(1.1); opacity: 1; }
     100% { transform: scale(1); opacity: 0.7; }
   }
   .animate-pulse-heartbeat {
     animation: pulse-heartbeat 1s ease-in-out infinite;
   }
}

/* Additional global styles can go here */
/* Example: Scrollbar styling (optional) */
/* ::-webkit-scrollbar {
  width: 8px;
}
::-webkit-scrollbar-track {
  background: theme('colors.slate.800');
}
::-webkit-scrollbar-thumb {
  background-color: theme('colors.cyan.700');
  border-radius: 4px;
  border: 2px solid theme('colors.slate.800');
}
::-webkit-scrollbar-thumb:hover {
  background-color: theme('colors.cyan.600');
} */


================================================
FILE: src/app/layout.tsx
================================================
// src/app/layout.tsx
import type { Metadata } from "next";
import { GeistSans } from "geist/font/sans"; // Utiliser GeistSans directement
import { GeistMono } from "geist/font/mono"; // Utiliser GeistMono directement
import "./globals.css";
import SessionProviderWrapper from "@/components/SessionProviderWrapper"; // Wrapper côté client
import Header from "@/components/Header"; // Importer le Header

export const metadata: Metadata = {
  title: "Orthanc Project - Gestion d'Imagerie Médicale", // Titre plus pertinent
  description: "Une plateforme moderne pour visualiser et gérer les images DICOM.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="fr"> {/* Langue française */}
      <body
        className={`${GeistSans.variable} ${GeistMono.variable} font-sans antialiased bg-[var(--background)] text-[var(--foreground)] overflow-x-hidden`} // Ajout overflow-x-hidden
      >
        {/* SessionProvider doit être dans un composant client */}
        <SessionProviderWrapper>
          {/* Design à grille fluide - structure de base */}
          <div className="flex flex-col min-h-screen">
             <Header /> {/* Barre de navigation */}
             <main className="flex-grow">
               {/* Intégrer ici la logique pour les transitions de page si nécessaire */}
               {children}
             </main>
             {/* Ajouter un Footer si nécessaire */}
             {/* <Footer /> */}
          </div>
        </SessionProviderWrapper>
      </body>
    </html>
  );
}


================================================
FILE: src/app/page.tsx
================================================
'use client';

import { useState, useEffect, useRef } from 'react';
import { motion, useScroll, useTransform } from 'framer-motion';
import { useInView } from 'react-intersection-observer';
import Image from 'next/image';
import Link from 'next/link';

// --- Composant DataParticles (Couleurs adaptées pour fonds clairs/sombres) ---
const DataParticles = ({ theme = 'dark' }: { theme?: 'light' | 'dark' }) => {
  const particlesRef = useRef<HTMLDivElement>(null);
  const [particles, setParticles] = useState<{ x: number; y: number; size: number; speed: number; color: string; opacity: number }[]>([]);

  useEffect(() => {
    const generateParticles = () => {
      // Ajuster les couleurs et l'opacité en fonction du thème de la section
      const colors = theme === 'light'
        ? ['#cbd5e1', '#94a3b8', '#e2e8f0', '#f1f5f9'] // Gris clairs/bleutés pour fond clair
        : ['#0891b2', '#0e7490', '#06b6d4', '#22d3ee', '#67e8f9']; // Cyan/Bleu pour fond sombre
      const baseOpacity = theme === 'light' ? 0.6 : 0.4;
      const randomOpacityFactor = theme === 'light' ? 0.4 : 0.6;
      const blur = theme === 'light' ? '0px' : '1px'; // Moins de flou sur fond clair

      const newParticles = Array.from({ length: 60 }, () => ({ // Moins de particules peut-être
        x: Math.random() * 100,
        y: Math.random() * 100,
        size: 0.8 + Math.random() * 2.5, // Légèrement plus gros peut-être
        speed: 0.4 + Math.random() * 1.5,
        color: colors[Math.floor(Math.random() * colors.length)],
        opacity: baseOpacity + Math.random() * randomOpacityFactor
      }));
      setParticles(newParticles);
    };

    generateParticles();

    const interval = setInterval(() => {
      if (particlesRef.current && document.visibilityState === 'visible') {
        setParticles(prev => prev.map(particle => ({
          ...particle,
          y: (particle.y + particle.speed / 20) % 100,
          x: (particle.x + (Math.sin(particle.y / 15) * 0.1)) % 100
        })));
      }
    }, 60); // Légèrement plus lent

    return () => clearInterval(interval);
  }, [theme]); // Re-générer si le thème change

  return (
    <div ref={particlesRef} className="absolute inset-0 z-0 overflow-hidden pointer-events-none">
      {particles.map((particle, index) => (
        <div
          key={index}
          className="absolute rounded-full"
          style={{
            backgroundColor: particle.color,
            width: `${particle.size}px`,
            height: `${particle.size}px`,
            left: `${particle.x}%`,
            top: `${particle.y}%`,
            opacity: particle.opacity,
            boxShadow: theme === 'dark' ? `0 0 ${4 + particle.size * 2}px ${particle.color}` : 'none', // Pas d'ombre sur fond clair
            filter: `blur(${theme === 'dark' ? '1px' : '0px'})` // Pas de flou sur fond clair
          }}
        />
      ))}
    </div>
  );
};


// --- Composant DicomViewerSimulation (INCHANGÉ - garde son thème sombre interne) ---
const DicomViewerSimulation = () => {
  // ... (code précédent identique) ...
    const [activeLayer, setActiveLayer] = useState(0);
  const [isPlaying, setIsPlaying] = useState(false);
  // Utiliser 5 images pour la simulation, par exemple image_2 à image_6
  const sliceImages = [
    "/images/image_2.jpg",
    "/images/image_3.jpg",
    "/images/image_4.jpg",
    "/images/image_5.jpg",
    "/images/image_6.jpg",
  ];
  const slices = Array.from({ length: sliceImages.length }); // S'adapte au nombre d'images
  const intervalRef = useRef<NodeJS.Timeout | null>(null);

  const startAnimation = () => {
    if (intervalRef.current) clearInterval(intervalRef.current); // Clear existing interval
    setIsPlaying(true);
    intervalRef.current = setInterval(() => {
      setActiveLayer(prev => (prev + 1) % sliceImages.length);
    }, 800);
  };

  const stopAnimation = () => {
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
    setIsPlaying(false);
  };

  useEffect(() => {
    // Cleanup on unmount
    return () => {
      if (intervalRef.current) clearInterval(intervalRef.current);
    };
  }, []);

  const handleSliceClick = (index: number) => {
    stopAnimation();
    setActiveLayer(index);
  };


  return (
    // Le viewer garde son style sombre pour contraster
    <div className="relative w-full max-w-md mx-auto h-96 bg-slate-800 rounded-xl overflow-hidden shadow-2xl border border-slate-700">
      <div className="absolute top-0 left-0 right-0 h-8 bg-slate-700 flex items-center px-3 z-10">
        <div className="h-3 w-3 rounded-full bg-red-500 mr-2"></div>
        <div className="h-3 w-3 rounded-full bg-yellow-500 mr-2"></div>
        <div className="h-3 w-3 rounded-full bg-green-500 mr-2"></div>
        <div className="ml-4 text-xs text-slate-300">Patient ID: ANON124597 • Brain MRI</div>
      </div>

      <div className="absolute inset-0 mt-8 bg-black">
        <div className="relative h-full w-full">
          {sliceImages.map((src, i) => (
            <div
              key={i}
              className="absolute inset-0 transition-opacity duration-300 flex items-center justify-center"
              style={{ opacity: activeLayer === i ? 1 : 0 }}
            >
              <div className="relative w-full h-full">
                <Image
                  src={src || `/images/placeholder_dicom.jpg`} // Utilise les images renommées
                  alt={`Examen Slice ${i+1}`} // Nom générique
                  fill
                  className="object-contain" // contain pour mieux voir l'image médicale
                />
              </div>
            </div>
          ))}

          {/* Interface contrôles & outils */}
          <div className="absolute top-2 right-2 flex flex-col space-y-2 z-20">
             {/* ... (icônes identiques) ... */}
            <button className="w-8 h-8 bg-slate-700 hover:bg-slate-600 rounded-md flex items-center justify-center text-white">
              <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                <path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
              </svg>
            </button>
            {/* ... autres boutons ... */}
          </div>

          {/* Annotation exemple */}
          <div className="absolute left-1/3 top-1/3 transform -translate-x-1/2 -translate-y-1/2 w-16 h-16 border border-yellow-400 rounded-sm opacity-40"></div>
        </div>
      </div>

      {/* Contrôle coupes */}
      <div className="absolute bottom-3 left-3 right-3 flex justify-between items-center">
        <button
          onClick={() => isPlaying ? stopAnimation() : startAnimation()}
          className="px-2 py-1 bg-cyan-600 hover:bg-cyan-700 rounded text-xs text-white"
        >
          {isPlaying ? 'Pause' : 'Défiler'}
        </button>

        <div className="flex space-x-1">
          {slices.map((_, index) => (
            <button
              key={index}
              onClick={() => handleSliceClick(index)}
              className={`w-5 h-5 rounded-sm flex items-center justify-center text-xs ${
                activeLayer === index ? 'bg-cyan-600 text-white' : 'bg-slate-700 hover:bg-slate-600 text-slate-300'
              }`}
            >
              {index + 1}
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};


// --- Composant FeatureCard (Adapté pour fond clair) ---
const FeatureCard = ({ title, description, icon, delay = 0 }: { title: string; description: string; icon: string; delay?: number }) => {
  const [ref, inView] = useInView({
    triggerOnce: true,
    threshold: 0.1,
  });

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 30 }}
      animate={inView ? { opacity: 1, y: 0 } : {}}
      transition={{ duration: 0.6, delay }}
      // Refonte Couleur: Fond blanc, bordure légère, ombre au survol
      className="group relative bg-white rounded-xl overflow-hidden p-6 shadow-sm hover:shadow-lg transition-all duration-300 border border-gray-200"
      whileHover={{ y: -5 }}
    >
      {/* Refonte Couleur: Garde la barre d'accent cyan/bleu */}
      <div
        className="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-cyan-500 to-blue-500 transform origin-left transition-transform duration-500 ease-out scale-x-0 group-hover:scale-x-100"
      />

      {/* Refonte Couleur: Fond icône clair, couleur icône plus sombre */}
      <div className="mb-4 text-cyan-600 flex items-center justify-center w-12 h-12 rounded-lg bg-cyan-100">
        <span className="text-2xl">{icon}</span>
      </div>

      {/* Refonte Couleur: Texte sombre */}
      <h3 className="text-xl font-bold text-slate-800 mb-2">{title}</h3>
      <p className="text-gray-600">{description}</p>

      {/* Refonte Couleur: Texte lien cyan plus sombre */}
      <div className="mt-4 text-cyan-600 opacity-0 group-hover:opacity-100 transition-opacity flex items-center">
        <span className="text-sm font-medium">En savoir plus</span>
        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
        </svg>
      </div>
    </motion.div>
  );
};


// --- Composant AnimatedStats (Adapté pour thème clair ou sombre) ---
const AnimatedStats = ({ theme = 'dark' }: { theme?: 'light' | 'dark' }) => {
  const stats = [
    { value: 99.9, label: "Disponibilité", symbol: "%" },
    { value: 0.25, label: "Temps de réponse", symbol: "s" },
    { value: 3, label: "Intégrations", symbol: "standards" },
    { value: 128, label: "Formats supportés", symbol: "bits" },
  ];

  const cardBg = theme === 'light' ? 'bg-white/70 backdrop-blur-sm border border-gray-200' : 'bg-slate-800/50 backdrop-blur-sm border border-slate-700/50';
  const gradientBg = theme === 'light' ? 'from-cyan-500/5 to-blue-600/5' : 'from-cyan-500/10 to-blue-600/5';
  const valueColor = theme === 'light' ? 'text-slate-800' : 'text-white';
  const symbolColor = theme === 'light' ? 'text-cyan-600' : 'text-cyan-400';
  const labelColor = theme === 'light' ? 'text-gray-600' : 'text-gray-400';

  return (
    <div className="grid grid-cols-2 lg:grid-cols-4 gap-6">
      {stats.map((stat, index) => {
        const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.2 });

        return (
          <motion.div
            key={index}
            ref={ref}
            initial={{ opacity: 0, scale: 0.9 }}
            animate={inView ? { opacity: 1, scale: 1 } : {}}
            transition={{ duration: 0.6, delay: index * 0.1 }}
            className={`relative ${cardBg} rounded-lg p-6 text-center shadow-sm`}
          >
            {/* <div className={`absolute inset-0 bg-gradient-to-br ${gradientBg} rounded-lg`} /> */}

            <div className="relative">
              <div className="flex items-center justify-center">
                <motion.span
                  initial={{ opacity: 0 }}
                  animate={inView ? { opacity: 1 } : {}}
                  className={`text-4xl font-bold ${valueColor}`}
                >
                  {stat.value}
                </motion.span>
                <span className={`ml-1 ${symbolColor} text-xl`}>{stat.symbol}</span>
              </div>
              <div className={`mt-1 ${labelColor}`}>{stat.label}</div>
            </div>
          </motion.div>
        );
      })}
    </div>
  );
};

// --- Composant AnimatedText (Adapté pour couleurs claires/sombres) ---
const AnimatedText = ({ text, className = "", colorClass = "text-slate-800" }: { text: string; className?: string, colorClass?: string }) => {
  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.5 });
  const letters = Array.from(text);

  return (
    <motion.h2
      ref={ref}
      // Refonte Couleur: Utilise colorClass pour la couleur du texte
      className={`inline-block ${colorClass} ${className}`}
      variants={{
          hidden: { opacity: 0 },
          visible: (i = 1) => ({
            opacity: 1,
            transition: { staggerChildren: 0.03, delayChildren: 0.1 * i },
          }),
        }}
      initial="hidden"
      animate={inView ? "visible" : "hidden"}
    >
      {letters.map((letter, index) => (
        <motion.span
          key={index}
          variants={{
            hidden: { opacity: 0, y: 20 },
            visible: {
              opacity: 1,
              y: 0,
              transition: { duration: 0.3 }
             },
          }}
          className="inline-block"
        >
          {letter === " " ? <span style={{ display: 'inline-block', width: '0.25em' }}></span> : letter} {/* Espace insécable */}
        </motion.span>
      ))}
    </motion.h2>
  );
};

// --- Composant ScrollProgressBar (Couleurs vives conservées) ---
const ScrollProgressBar = () => {
  const { scrollYProgress } = useScroll();
  return (
    <motion.div
      // Refonte Couleur: Garde les couleurs vives pour la visibilité
      className="fixed top-0 left-0 right-0 h-1 bg-gradient-to-r from-cyan-500 via-blue-500 to-cyan-500 z-50"
      style={{ scaleX: scrollYProgress, transformOrigin: "0%" }}
    />
  );
};

// --- Composant HexagonalGrid (Adapté pour fond clair) ---
const HexagonalGrid = () => {
 const hexagons = Array.from({ length: 30 });
  const [ref, inView] = useInView({ triggerOnce: true, threshold: 0.1 });

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0 }}
      animate={inView ? { opacity: 1 } : {}} // Opacité contrôlée ici
      transition={{ duration: 1.5 }}
      className="absolute -inset-20 overflow-hidden z-0 pointer-events-none"
    >
      <div className="grid grid-cols-5 gap-10 transform rotate-12 scale-125 opacity-30"> {/* Opacité globale */}
        {hexagons.map((_, index) => (
          <motion.div
            key={index}
            initial={{ opacity: 0, scale: 0.5 }}
            animate={inView ? { opacity: 0.1 + Math.random() * 0.3, scale: 1 } : {}}
            transition={{ duration: 0.8, delay: Math.random() * 1 }}
            className="w-40 h-40 relative"
          >
            {/* Refonte Couleur: Bordure très légère, pas de fond */}
            <div
              className="absolute inset-0 border border-cyan-200/50"
              style={{
                clipPath: "polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)"
              }}
            />
          </motion.div>
        ))}
      </div>
    </motion.div>
  );
};


// --- Composant Principal Home ---
export default function Home() {
  // Hooks (inchangés)
  const { scrollY } = useScroll();
  const y1 = useTransform(scrollY, [0, 500], [0, -100]);
  const opacityHero = useTransform(scrollY, [0, 300, 500], [1, 0.5, 0]);
  const scaleHero = useTransform(scrollY, [0, 400], [1, 0.8]);
  const heroRef = useRef<HTMLDivElement>(null);
  const [mounted, setMounted] = useState(false);
  useEffect(() => { setMounted(true); }, []);

  // Hooks InView (inchangés)
  const [heroInViewRef, heroInView] = useInView({ triggerOnce: false, threshold: 0.2 });
  const [presInViewRef, presInView] = useInView({ triggerOnce: true, threshold: 0.3 });
  const [featInViewRef, featInView] = useInView({ triggerOnce: true, threshold: 0.1 });
  const [statsInViewRef, statsInView] = useInView({ triggerOnce: true, threshold: 0.2 });
  const [uiInViewRef, uiInView] = useInView({ triggerOnce: true, threshold: 0.2 });
  const [testiInViewRef, testiInView] = useInView({ triggerOnce: true, threshold: 0.1 });
  const [ctaInViewRef, ctaInView] = useInView({ triggerOnce: true, threshold: 0.3 });

  if (!mounted) return null;

  return (
    // Refonte Couleur: Fond principal blanc/gris clair
    <div className="relative min-h-screen overflow-x-hidden bg-white text-slate-800">
      <ScrollProgressBar />

      {/* Hero Section - Garde un fond sombre pour l'impact initial */}
      <section
        ref={heroInViewRef}
        className="relative h-screen flex items-center justify-center overflow-hidden bg-gradient-to-b from-slate-900 via-slate-900 to-slate-800 text-white" // Garde un fond sombre
      >
        {/* Fond avec image (ajuster opacité si besoin) */}
        <div className="absolute inset-0 z-0">
          <Image
            src="/images/image_9.jpg"
            alt="Fond médical abstrait"
            fill
            className="object-cover opacity-15 scale-105 blur-sm" // Opacité ajustée
            priority
          />
          <div className="absolute inset-0 bg-gradient-to-b from-slate-900/60 via-slate-900/90 to-slate-900" />
        </div>

        {/* Particules thème sombre */}
        <DataParticles theme="dark" />

        {/* Contenu du Hero (texte reste blanc) */}
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={heroInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 50 }}
          transition={{ duration: 0.8 }}
          className="relative z-10 text-center px-4 max-w-5xl mx-auto"
        >
          {/* Badge */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 1, delay: 0.2 }}
            className="mb-4 inline-block py-2 px-4 rounded-full bg-gradient-to-r from-cyan-500/20 to-blue-500/20 border border-cyan-500/30"
          >
            <span className="text-sm font-medium text-cyan-300 tracking-wider">DEMAIN COMMENCE AUJOURD'HUI</span>
          </motion.div>

          {/* Titre (partie Orthanc en gradient, Project en blanc) */}
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.4 }}
            className="text-5xl md:text-7xl font-bold mb-6 leading-tight"
          >
            <span className="bg-gradient-to-r from-cyan-400 via-blue-400 to-cyan-400 bg-clip-text text-transparent">Orthanc</span>
            <span className="text-white"> Project</span>
          </motion.h1>

          {/* Paragraphe (texte clair) */}
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.6 }}
            className="text-xl md:text-2xl text-slate-300 mb-8 max-w-3xl mx-auto font-light"
          >
            Une révolution dans l'imagerie médicale : diagnostics précis, collaboration sécurisée, et workflow optimisé.
          </motion.p>

          {/* Boutons (styles conservés, adaptés au fond sombre) */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.8 }}
            className="flex flex-col sm:flex-row items-center justify-center gap-4"
          >
            <Link href="/api/auth/signin/google" passHref>
               <motion.button
                 whileHover={{ scale: 1.05, boxShadow: '0 0 15px rgba(6, 182, 212, 0.5)' }}
                 whileTap={{ scale: 0.95 }}
                 className="px-8 py-4 bg-gradient-to-r from-cyan-600 to-blue-600 hover:from-cyan-700 hover:to-blue-700 text-white font-semibold rounded-lg transition-all duration-300 shadow-lg"
               >
                 Commencer Maintenant
               </motion.button>
            </Link>
             <motion.button
               whileHover={{ scale: 1.05, backgroundColor: 'rgba(255, 255, 255, 0.1)' }}
               whileTap={{ scale: 0.95 }}
               // Refonte Couleur: Bordure plus visible sur fond sombre
               className="px-8 py-4 bg-transparent border border-slate-500 hover:border-slate-300 text-white font-semibold rounded-lg transition-all duration-300"
             >
               Voir la Démo
             </motion.button>
          </motion.div>
        </motion.div>

        {/* Indicateur de scroll (cyan sur fond sombre) */}
        <div className="absolute bottom-12 left-0 right-0 z-10 flex justify-center">
          <motion.div
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 1, delay: 1.5, repeat: Infinity, repeatType: "reverse", ease: "easeInOut" }}
          >
            <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8 text-cyan-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 14l-7 7m0 0l-7-7m7 7V3" />
            </svg>
          </motion.div>
        </div>
      </section>

      {/* Section Présentation avec DicomViewerSimulation */}
      {/* Refonte Couleur: Fond blanc */}
      <section ref={presInViewRef} className="relative py-24 px-4 overflow-hidden bg-white">
        {/* Grille Hexagonale adaptée pour fond clair */}
        <HexagonalGrid />
        <div className="relative max-w-7xl mx-auto z-10">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-16 items-center"> {/* Augmentation du gap */}
            {/* Texte à gauche */}
            <div className="order-2 lg:order-1">
               <div className="mb-8">
                {/* Refonte Couleur: Titre sombre */}
                <AnimatedText
                  text="Une Nouvelle Ère de l'Imagerie Médicale"
                  className="text-4xl font-bold mb-4"
                  colorClass="text-slate-800" // Spécifier la couleur
                />
                {/* Ligne dégradée conservée */}
                <motion.div
                  initial={{ width: 0 }}
                  whileInView={{ width: "40%" }}
                  viewport={{ once: true }}
                  transition={{ duration: 0.8, delay: 0.5 }}
                  className="h-1 bg-gradient-to-r from-cyan-500 to-blue-500 mb-6"
                />
                {/* Refonte Couleur: Texte sombre, accent cyan/bleu plus vif */}
                <div className="space-y-4 text-gray-700">
                  <motion.p
                    initial={{ opacity: 0, x: -20 }}
                    animate={presInView ? { opacity: 1, x: 0 } : {}}
                    transition={{ duration: 0.6, delay: 0.2 }}
                  >
                    <span className="text-cyan-600 font-semibold">orthanc-project</span> redéfinit l'interaction avec les données DICOM grâce à une architecture web moderne, sécurisée et interopérable.
                  </motion.p>

                  <motion.p
                    initial={{ opacity: 0, x: -20 }}
                    animate={presInView ? { opacity: 1, x: 0 } : {}}
                    transition={{ duration: 0.6, delay: 0.4 }}
                  >
                    Conçu pour les professionnels de santé, notre système centralise l'accès, la recherche et la visualisation des images médicales tout en optimisant les flux de travail cliniques.
                  </motion.p>
                </div>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={presInView ? { opacity: 1, y: 0 } : {}}
                  transition={{ duration: 0.6, delay: 0.6 }}
                  className="mt-8 flex items-center"
                >
                  {/* Refonte Couleur: Lien cyan plus vif */}
                  <Link href="/dashboard" className="group inline-flex items-center">
                    <span className="text-cyan-600 font-medium mr-2 group-hover:mr-4 transition-all">Découvrir la plateforme</span>
                    <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 text-cyan-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14 5l7 7m0 0l-7 7m7-7H3" />
                    </svg>
                  </Link>
                </motion.div>
              </div>
            </div>
            {/* DicomViewerSimulation à droite (garde son style sombre) */}
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 20 }} // Animation ajustée
              animate={presInView ? { opacity: 1, scale: 1, y: 0 } : {}}
              transition={{ duration: 0.8, delay: 0.1 }}
              className="order-1 lg:order-2 relative"
            >
              {/* Refonte Couleur: Lueur subtile sur fond blanc */}
              <div className="absolute -inset-4 bg-gradient-to-r from-cyan-300/10 to-blue-300/10 rounded-2xl blur-xl opacity-50 z-0"></div>
              <div className="relative transform-style-3d perspective-1200 z-10">
                 <DicomViewerSimulation />
              </div>
            </motion.div>
          </div>
        </div>
      </section>

       {/* Section Fonctionnalités */}
       {/* Refonte Couleur: Fond gris très clair pour alterner */}
      <section ref={featInViewRef} className="relative py-24 px-4 bg-gray-50">
        <div className="max-w-7xl mx-auto">
          {/* --- Bloc Titre --- */}
          {/* Confirmation Centrage: text-center ici centre bien tout ce bloc */}
          <div className="text-center mb-16">
            {/* Refonte Couleur: Badge adapté fond clair */}
            <div className="inline-block mb-3 py-1 px-3 rounded-full bg-cyan-100 text-cyan-700 text-sm font-medium">
              CAPACITÉS
            </div>
            {/* Refonte Couleur: Titre sombre */}
            <AnimatedText
              text="Un Écosystème Complet d'Imagerie"
              className="text-4xl font-bold text-slate-800 mb-4"
              colorClass="text-slate-800"
            />
            {/* Refonte Couleur: Paragraphe sombre */}
            <motion.p
              initial={{ opacity: 0 }}
              animate={featInView ? { opacity: 1} : {}}
              transition={{ duration: 0.8, delay: 0.5 }}
              className="max-w-2xl mx-auto text-gray-600"
            >
              Découvrez les fonctionnalités avancées qui font d'orthanc-project la solution idéale pour les établissements de santé modernes.
            </motion.p>
          </div>
          {/* --- Fin Bloc Titre --- */}

          {/* Grille FeatureCard (utilise le composant FeatureCard adapté) */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
             <FeatureCard
              title="Visualisation Haute Fidélité"
              description="Affichage interactif des images DICOM avec outils avancés d'annotation et de mesure directement dans votre navigateur."
              icon="👁️"
              delay={0.1}
            />
            <FeatureCard
              title="Sécurité Conforme"
              description="Authentification multi-facteurs, contrôle d'accès basé sur les rôles et audit complet pour la conformité RGPD."
              icon="🛡️"
              delay={0.2}
            />
            <FeatureCard
              title="Workflow Optimisé"
              description="Réception DICOM Push, importation manuelle intuitive et indexation rapide pour accélérer le diagnostic."
              icon="⚡"
              delay={0.3}
            />
            <FeatureCard
              title="Partage Simplifié"
              description="Partage sécurisé d'études via liens contrôlés pour faciliter la téléexpertise et les avis confraternels."
              icon="🔗"
              delay={0.4}
            />
            <FeatureCard
              title="Interopérabilité Standard"
              description="Intégration SIH/DPI via HL7 FHIR et DICOMweb pour une vue patient unifiée et des échanges fluides."
              icon="🌐"
              delay={0.5}
            />
            <FeatureCard
              title="Technologie Moderne"
              description="Stack Next.js, React, TypeScript et Prisma garantissant performance, maintenabilité et évolutivité."
              icon="⚙️"
              delay={0.6}
            />
          </div>
        </div>
      </section>

      {/* Section Statistiques */}
      {/* Refonte Couleur: Fond contrastant (gris moyen ou dégradé léger) pour rythmer */}
      <section ref={statsInViewRef} className="relative py-20 px-4 bg-gradient-to-b from-gray-100 to-gray-200">
         <div className="max-w-6xl mx-auto">
          <div className="relative z-10 py-10">
            {/* Utilise AnimatedStats adapté pour thème clair */}
            <AnimatedStats theme="light" />
          </div>
        </div>
      </section>

      {/* Section Interface */}
      {/* Refonte Couleur: Retour à un fond blanc */}
      <section ref={uiInViewRef} className="relative py-24 px-4 overflow-hidden bg-white">
         <div className="max-w-7xl mx-auto">
          {/* --- Bloc Titre --- */}
          {/* Confirmation Centrage: text-center ici centre bien tout ce bloc */}
          <div className="text-center mb-16">
            {/* Refonte Couleur: Badge adapté fond clair */}
            <div className="inline-block mb-3 py-1 px-3 rounded-full bg-cyan-100 text-cyan-700 text-sm font-medium">
              EXPÉRIENCE UTILISATEUR
            </div>
            {/* Refonte Couleur: Titre sombre */}
            <AnimatedText
              text="Interface Conçue pour les Professionnels"
              className="text-4xl font-bold text-slate-800 mb-4"
              colorClass="text-slate-800"
            />
            {/* Refonte Couleur: Paragraphe sombre */}
            <motion.p
              initial={{ opacity: 0 }}
              animate={uiInView ? { opacity: 1 } : {}}
              transition={{ duration: 0.8, delay: 0.5 }}
              className="max-w-2xl mx-auto text-gray-600"
            >
              Une expérience utilisateur intuitive et performante, développée en collaboration avec des radiologues et cliniciens.
            </motion.p>
          </div>
          {/* --- Fin Bloc Titre --- */}

          <motion.div
              initial={{ opacity: 0, y: 30 }}
              animate={uiInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.8 }}
              className="relative"
            >
            {/* Refonte Couleur: Lueur très subtile */}
            <div className="absolute -inset-4 bg-gradient-to-r from-cyan-300/10 to-blue-300/10 rounded-2xl blur-xl opacity-40"></div>
            {/* Refonte Couleur: Conteneur image avec bordure légère */}
            <div className="relative bg-white rounded-2xl overflow-hidden shadow-xl border border-gray-200 p-2">
            <Image
              src="/images/image_7.jpg"
              alt="Exemple Interface Orthanc Project"
              width={1200}
              height={800}
              className="rounded-xl w-full h-auto object-cover" // Retiré shadow-inner, remplacé par shadow-xl sur le parent
            />
          </div>
        </motion.div>
        {/* Grid des 3 points forts */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-16">
            {/* Point Fort 1 */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={uiInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.6, delay: 0.2 }}
              // Refonte Couleur: Fond blanc/très clair, bordure, texte sombre
              className="bg-gray-50/50 rounded-lg p-6 border border-gray-200"
            >
              {/* Refonte Couleur: Icône adaptée */}
              <div className="w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center mb-4">
                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-cyan-600">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M10.5 1.5H8.25A2.25 2.25 0 006 3.75v16.5a2.25 2.25 0 002.25 2.25h7.5A2.25 2.25 0 0018 20.25V3.75a2.25 2.25 0 00-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3" />
                 </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-800 mb-2">Design Adaptatif</h3>
              <p className="text-gray-600 text-sm">L'interface s'adapte à tous les écrans, du smartphone au workstation radiologique.</p>
            </motion.div>

             {/* Point Fort 2 */}
             <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={uiInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.6, delay: 0.4 }}
              className="bg-gray-50/50 rounded-lg p-6 border border-gray-200"
            >
              <div className="w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center mb-4">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-cyan-600">
                   <path strokeLinecap="round" strokeLinejoin="round" d="M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 1.658c-.007.379.138.752.43.992l1.003.827c.446.367.592.984.26 1.431l-1.296 2.247a1.125 1.125 0 01-1.37.49l-1.217-.456c-.355-.133-.75-.072-1.075.124a6.57 6.57 0 01-.22.127c-.331.185-.581.496-.644.87l-.213 1.281c-.09.543-.56.94-1.11.94h-2.594c-.55 0-1.019-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.759 6.759 0 010-1.658c.007-.379-.137-.752-.43-.992l-1.004-.827a1.125 1.125 0 01-.26-1.431l1.297-2.247a1.125 1.125 0 011.37-.49l1.217.456c.355.133.75.072 1.076-.124.072-.044.146-.087.22-.127.332-.185.582-.496.645-.87l.213-1.281z" />
                   <path strokeLinecap="round" strokeLinejoin="round" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-800 mb-2">Personnalisation Avancée</h3>
              <p className="text-gray-600 text-sm">Configurez votre espace de travail, raccourcis et préférences d'affichage selon vos besoins.</p>
            </motion.div>

            {/* Point Fort 3 */}
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={uiInView ? { opacity: 1, y: 0 } : {}}
              transition={{ duration: 0.6, delay: 0.6 }}
              className="bg-gray-50/50 rounded-lg p-6 border border-gray-200"
            >
              <div className="w-10 h-10 bg-cyan-100 rounded-lg flex items-center justify-center mb-4">
                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 text-cyan-600">
                   <path strokeLinecap="round" strokeLinejoin="round" d="M13 10V3L4 14h7v7l9-11h-7z" />
                 </svg>
              </div>
              <h3 className="text-lg font-semibold text-slate-800 mb-2">Performance Optimisée</h3>
              <p className="text-gray-600 text-sm">Chargement rapide et navigation fluide, même avec des études volumineuses, grâce à une architecture optimisée.</p>
            </motion.div>
        </div>
        </div>
      </section>

      {/* Section Témoignages */}
      {/* Refonte Couleur: Fond gris clair (alterne avec section précédente) */}
      <section ref={testiInViewRef} className="relative py-24 px-4 bg-gray-50">
          <div className="max-w-6xl mx-auto">
          {/* --- Bloc Titre --- */}
          {/* Confirmation Centrage: text-center ici centre bien tout ce bloc */}
          <div className="text-center mb-16">
             {/* Refonte Couleur: Badge adapté */}
            <div className="inline-block mb-3 py-1 px-3 rounded-full bg-cyan-100 text-cyan-700 text-sm font-medium">
              TÉMOIGNAGES
            </div>
            {/* Refonte Couleur: Titre sombre */}
            <AnimatedText
              text="Ils Font Confiance à Orthanc Project"
              className="text-4xl font-bold text-slate-800 mb-4"
              colorClass="text-slate-800"
            />
          </div>
          {/* --- Fin Bloc Titre --- */}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {/* Témoignage 1 */}
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              animate={testiInView ? { opacity: 1, x: 0 } : {}}
              transition={{ duration: 0.6, delay: 0.1 }}
              // Refonte Couleur: Carte blanche, bordure, ombre légère
              className="relative bg-white rounded-xl p-8 shadow-md border border-gray-200"
            >
               {/* Refonte Couleur: Citation SVG plus claire */}
               <div className="absolute top-0 left-0 transform -translate-x-3 -translate-y-3">
                <svg width="42" height="42" viewBox="0 0 42 42" className="text-cyan-200 opacity-80">
                  <path d="M13.14 10.68C12.16 11.5 11.38 12.5 10.84 13.66C10.3 14.82 10.02 16.1 10 17.42V22H18V14H15.04C15.3 13.3 15.72 12.68 16.3 12.14C16.88 11.62 17.56 11.24 18.3 11H20V3H12C11.98 5.16 11.5 7.28 10.58 9.24C9.66 11.2 8.32 12.96 6.62 14.48L10 17.42C11.02 15.5 12.3 13.76 13.14 10.68ZM31.14 10.68C30.16 11.5 29.38 12.5 28.84 13.66C28.3 14.82 28.02 16.1 28 17.42V22H36V14H33.04C33.3 13.3 33.72 12.68 34.3 12.14C34.88 11.62 35.56 11.24 36.3 11H38V3H30C29.98 5.16 29.5 7.28 28.58 9.24C27.66 11.2 26.32 12.96 24.62 14.48L28 17.42C29.02 15.5 30.3 13.76 31.14 10.68Z" fill="currentColor" />
                </svg>
              </div>

              <div className="relative z-10">
                 {/* Refonte Couleur: Texte sombre */}
                <p className="text-gray-700 mb-6 font-light italic">
                  "Orthanc Project a transformé notre service. L'accès instantané aux images et la collaboration ont amélioré notre efficacité."
                </p>
                 {/* Refonte Couleur: Texte sombre, sous-titre plus clair */}
                <div className="flex items-center">
                  <Image src="/images/image_8.jpg" alt="Dr. Sophie Laurent" width={48} height={48} className="w-12 h-12 rounded-full object-cover mr-4 bg-gray-200"/>
                  <div>
                    <h4 className="text-slate-800 font-medium">Dr. Sophie Laurent</h4>
                    <p className="text-gray-500 text-sm">Chef de Service Radiologie</p>
                  </div>
                </div>
              </div>
            </motion.div>
             {/* Témoignage 2 */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              animate={testiInView ? { opacity: 1, x: 0 } : {}}
              transition={{ duration: 0.6, delay: 0.3 }}
              className="relative bg-white rounded-xl p-8 shadow-md border border-gray-200"
            >
              <div className="absolute top-0 left-0 transform -translate-x-3 -translate-y-3">
                 <svg width="42" height="42" viewBox="0 0 42 42" className="text-cyan-200 opacity-80">
                    <path d="M13.14 10.68C12.16 11.5 11.38 12.5 10.84 13.66C10.3 14.82 10.02 16.1 10 17.42V22H18V14H15.04C15.3 13.3 15.72 12.68 16.3 12.14C16.88 11.62 17.56 11.24 18.3 11H20V3H12C11.98 5.16 11.5 7.28 10.58 9.24C9.66 11.2 8.32 12.96 6.62 14.48L10 17.42C11.02 15.5 12.3 13.76 13.14 10.68ZM31.14 10.68C30.16 11.5 29.38 12.5 28.84 13.66C28.3 14.82 28.02 16.1 28 17.42V22H36V14H33.04C33.3 13.3 33.72 12.68 34.3 12.14C34.88 11.62 35.56 11.24 36.3 11H38V3H30C29.98 5.16 29.5 7.28 28.58 9.24C27.66 11.2 26.32 12.96 24.62 14.48L28 17.42C29.02 15.5 30.3 13.76 31.14 10.68Z" fill="currentColor" />
                 </svg>
              </div>
               <div className="relative z-10">
                 <p className="text-gray-700 mb-6 font-light italic">
                   "La facilité d'intégration avec notre SIH et la conformité aux normes de sécurité ont été des facteurs clés dans notre choix."
                 </p>
                 <div className="flex items-center">
                  <Image src="/images/image_10.jpg" alt="Marc Dupont" width={48} height={48} className="w-12 h-12 rounded-full object-cover mr-4 bg-gray-200"/>
                   <div>
                     <h4 className="text-slate-800 font-medium">Marc Dupont</h4>
                     <p className="text-gray-500 text-sm">DSI, Clinique ABC</p>
                   </div>
                 </div>
               </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Section CTA */}
      {/* Refonte Couleur: Fond blanc pour revenir à la base avant le footer */}
      <section ref={ctaInViewRef} className="relative py-24 px-4 bg-white">
          <div className="max-w-5xl mx-auto">
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }} // Animation subtile
            animate={ctaInView ? { opacity: 1, scale: 1 } : {}}
            transition={{ duration: 0.8 }}
            // Refonte Couleur: Fond dégradé subtil, bordure
            className="relative overflow-hidden rounded-2xl bg-gradient-to-r from-gray-50 to-blue-50 p-12 border border-gray-200 shadow-lg"
          >
             {/* Particules adaptées pour fond clair */}
             <DataParticles theme="light" />

            <div className="relative z-10 text-center">
              {/* Refonte Couleur: Titre sombre */}
              <AnimatedText
                text="Prêt à Révolutionner Votre Imagerie ?"
                className="text-3xl md:text-4xl font-bold text-slate-800 mb-6"
                colorClass="text-slate-800"
              />
              {/* Refonte Couleur: Paragraphe sombre */}
              <motion.p
                initial={{ opacity: 0 }}
                animate={ctaInView ? { opacity: 1 } : {}}
                transition={{ duration: 0.8, delay: 0.3 }}
                className="text-gray-600 mb-8 max-w-3xl mx-auto"
              >
                Découvrez comment Orthanc Project peut transformer la gestion de vos images médicales. Contactez-nous pour une démonstration personnalisée.
              </motion.p>

              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={ctaInView ? { opacity: 1, y: 0 } : {}}
                transition={{ duration: 0.6, delay: 0.5 }}
                className="flex flex-col sm:flex-row items-center justify-center gap-4"
              >
                 {/* Bouton Principal (gradient conservé) */}
                 <motion.button
                   whileHover={{ scale: 1.05, filter: 'brightness(1.1)' }}
                   whileTap={{ scale: 0.95 }}
                   className="px-8 py-4 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white font-semibold rounded-lg transition-all duration-300 shadow-md hover:shadow-lg"
                 >
                   Demander une Démo
                 </motion.button>
                 {/* Bouton Secondaire (bordure cyan/bleu, texte assorti) */}
                 <motion.button
                   whileHover={{ scale: 1.05, backgroundColor: 'rgba(6, 182, 212, 0.05)' }} // Léger fond au survol
                   whileTap={{ scale: 0.95 }}
                   className="px-8 py-4 bg-transparent border border-cyan-500 text-cyan-600 hover:border-cyan-600 font-semibold rounded-lg transition-all duration-300"
                 >
                   Consulter la Doc
                 </motion.button>
              </motion.div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      {/* Refonte Couleur: Fond sombre conservé pour un ancrage final */}
      <footer className="bg-slate-900 border-t border-slate-700 py-12 px-4 text-slate-300">
         <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-10">
            <div>
               {/* Titre (gradient conservé) */}
              <div className="text-2xl font-bold bg-gradient-to-r from-cyan-400 to-blue-400 bg-clip-text text-transparent mb-4">
                Orthanc Project
              </div>
              <p className="text-slate-400 mb-6 text-sm">
                Solution d'imagerie médicale innovante pour les professionnels de santé.
              </p>
              {/* Icônes sociales (couleurs claires) */}
              <div className="flex space-x-4">
                 <a href="#" className="text-slate-400 hover:text-cyan-400 transition-colors"><svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">...</svg></a>
                 <a href="https://github.com/noreyni03/orthanc-project" target="_blank" rel="noopener noreferrer" className="text-slate-400 hover:text-cyan-400 transition-colors"><svg className="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">...</svg></a>
                 {/* ... autres icônes ... */}
              </div>
            </div>
            {/* Colonnes Liens (texte clair) */}
            <div>
              <h3 className="text-white font-semibold mb-4">Produit</h3>
               <ul className="space-y-2">
                 <li><Link href="#features" className="text-slate-400 hover:text-cyan-400 transition-colors text-sm">Fonctionnalités</Link></li>
                 {/* ... autres liens ... */}
               </ul>
            </div>
            <div>
              <h3 className="text-white font-semibold mb-4">Ressources</h3>
               <ul className="space-y-2">
                 <li><Link href="/docs" className="text-slate-400 hover:text-cyan-400 transition-colors text-sm">Documentation</Link></li>
                 {/* ... autres liens ... */}
              </ul>
            </div>
            <div>
              <h3 className="text-white font-semibold mb-4">Contact</h3>
               <ul className="space-y-2">
                 <li><Link href="/support" className="text-slate-400 hover:text-cyan-400 transition-colors text-sm">Support Technique</Link></li>
                 {/* ... autres liens ... */}
              </ul>
            </div>
          </div>

          {/* Copyright et liens légaux (texte plus clair) */}
          <div className="mt-12 pt-8 border-t border-slate-700 flex flex-col md:flex-row justify-between items-center">
            <p className="text-slate-500 text-sm mb-4 md:mb-0">
              © {new Date().getFullYear()} Orthanc Project. Université Cheikh Anta Diop de Dakar.
            </p>
            {/* <div className="flex space-x-6">
               <a href="#" className="text-slate-500 hover:text-cyan-400 text-sm">Politique de confidentialité</a>
               <a href="#" className="text-slate-500 hover:text-cyan-400 text-sm">Conditions d'utilisation</a>
            </div> */}
          </div>
        </div>
      </footer>
    </div>
  );
}


================================================
FILE: src/app/(app)/admin/users/page.tsx
================================================
// src/app/(app)/admin/users/page.tsx
'use client';

import withAuth from '@/components/withAuth';
import React, { useState, useEffect } from 'react';
import Image from 'next/image'; // Import Image component

// Define interfaces for the data structures
interface Role {
  id: number;
  name: string;
}

interface UserAdminView {
  id: string;
  name?: string | null;
  email?: string | null;
  image?: string | null; // Added image
  roles: Role[]; // Use Role interface
  enabled: boolean;
  provider: string; // Added provider
  createdAt: string; // Added createdAt
}

function AdminUsersPage() {
  const [users, setUsers] = useState<UserAdminView[]>([]);
  const [allRoles, setAllRoles] = useState<Role[]>([]); // State for all available roles
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [filter, setFilter] = useState('');

  // --- State for Editing Roles ---
  const [editingUserId, setEditingUserId] = useState<string | null>(null);
  const [selectedRoles, setSelectedRoles] = useState<Record<number, boolean>>({}); // Map roleId -> isSelected
  const [savingUserId, setSavingUserId] = useState<string | null>(null); // Loading state for save button

  // Fetch initial data (users and roles)
  useEffect(() => {
    const fetchData = async () => {
      setLoading(true);
      setError(null);
      try {
        const [usersResponse, rolesResponse] = await Promise.all([
          fetch('/api/admin/users'),
          fetch('/api/admin/roles') // Fetch all roles
        ]);

        if (!usersResponse.ok) {
          throw new Error(`Erreur lors de la récupération des utilisateurs (${usersResponse.status})`);
        }
        if (!rolesResponse.ok) {
           throw new Error(`Erreur lors de la récupération des rôles (${rolesResponse.status})`);
         }

        const usersData: UserAdminView[] = await usersResponse.json();
        const rolesData: Role[] = await rolesResponse.json();

        setUsers(usersData);
        setAllRoles(rolesData);

      } catch (err: any) {
        setError(err.message || 'Une erreur est survenue');
        console.error("Fetch error:", err);
      } finally {
        setLoading(false);
      }
    };
    fetchData();
  }, []);

  // Filter users based on input
  const filteredUsers = users.filter(user =>
    user.email?.toLowerCase().includes(filter.toLowerCase()) ||
    user.name?.toLowerCase().includes(filter.toLowerCase())
  );

  // --- Role Editing Handlers ---

  const handleEditClick = (user: UserAdminView) => {
    setEditingUserId(user.id);
    // Initialize selectedRoles based on the user's current roles
    const initialSelected: Record<number, boolean> = {};
    allRoles.forEach(role => {
      initialSelected[role.id] = user.roles.some(userRole => userRole.id === role.id);
    });
    setSelectedRoles(initialSelected);
  };

  const handleCancelClick = () => {
    setEditingUserId(null);
    setSelectedRoles({});
  };

  const handleRoleCheckboxChange = (roleId: number, isChecked: boolean) => {
    setSelectedRoles(prev => ({
      ...prev,
      [roleId]: isChecked,
    }));
  };

  const handleSaveRoles = async () => {
     if (!editingUserId) return;

     setSavingUserId(editingUserId); // Show saving indicator for this user
     setError(null); // Clear previous errors

     const selectedRoleIds = Object.entries(selectedRoles)
       .filter(([_, isSelected]) => isSelected)
       .map(([roleId]) => parseInt(roleId, 10)); // Get array of selected role IDs (as numbers)

     try {
       const response = await fetch(`/api/admin/users/${editingUserId}`, {
         method: 'PUT',
         headers: {
           'Content-Type': 'application/json',
         },
         body: JSON.stringify({ roleIds: selectedRoleIds }), // Send the array of IDs
       });

       if (!response.ok) {
         let errorMsg = `Erreur lors de la mise à jour (${response.status})`;
         try {
             const errData = await response.json();
             errorMsg = errData.message || errorMsg;
         } catch(e) { /* ignore */ }
         throw new Error(errorMsg);
       }

       const updatedUser: UserAdminView = await response.json();

       // Update the user list locally for immediate feedback
       setUsers(prevUsers => prevUsers.map(user =>
         user.id === updatedUser.id ? updatedUser : user
       ));

       setEditingUserId(null); // Exit editing mode
       setSelectedRoles({});

     } catch (err: any) {
       setError(err.message || 'Erreur serveur lors de la sauvegarde.');
       console.error("Save roles error:", err);
     } finally {
       setSavingUserId(null); // Hide saving indicator
     }
   };

  // --- Render Logic ---

  if (loading) return <div className="p-8 text-center text-gray-400">Chargement des données...</div>;
  if (error && users.length === 0) return <div className="p-8 text-center text-red-500">Erreur: {error}</div>; // Show error prominently if loading failed

  return (
    <div className="container mx-auto p-4 md:p-8 text-[var(--foreground)]">
      <h1 className="text-3xl font-semibold mb-6 text-white">Gestion des Utilisateurs</h1>

      {/* Filter Input */}
      <div className="mb-6">
        <input
          type="text"
          placeholder="Filtrer par nom ou email..."
          value={filter}
          onChange={(e) => setFilter(e.target.value)}
          className="w-full md:w-1/2 lg:w-1/3 px-4 py-2 border rounded-lg bg-slate-700/50 border-slate-600 focus:border-cyan-500 focus:ring-cyan-500 focus:outline-none text-white placeholder-gray-400"
        />
      </div>

      {/* Display general error messages here */}
      {error && !savingUserId && (
          <div className="mb-4 rounded-md border border-red-500/50 bg-red-900/20 p-3 text-center text-sm text-red-400">
              {error}
          </div>
       )}

      {/* User Cards Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredUsers.length === 0 && !loading && (
            <p className="text-gray-400 md:col-span-2 lg:col-span-3 text-center">Aucun utilisateur trouvé.</p>
        )}
        {filteredUsers.map((user) => (
          <div
            key={user.id}
            className={`bg-slate-800/60 backdrop-blur-sm rounded-xl shadow-lg p-5 border border-slate-700 transition-all duration-300 ${editingUserId === user.id ? 'ring-2 ring-cyan-500' : 'hover:shadow-cyan-500/20'}`}
          >
            {/* User Info Section */}
            <div className="flex items-center mb-4">
              {user.image ? (
                <Image
                  src={user.image}
                  alt={user.name || 'Avatar'}
                  width={48}
                  height={48}
                  className="w-12 h-12 rounded-full mr-4 border-2 border-slate-600"
                />
              ) : (
                <div className="w-12 h-12 rounded-full mr-4 bg-slate-700 flex items-center justify-center text-xl font-semibold text-cyan-400 border-2 border-slate-600">
                  {user.name?.substring(0, 1).toUpperCase() || user.email?.substring(0, 1).toUpperCase()}
                </div>
              )}
              <div>
                <p className="font-semibold text-white truncate" title={user.name || user.email || ''}>
                  {user.name || <span className='italic text-gray-400'>Sans nom</span>}
                </p>
                <p className="text-sm text-gray-400 truncate" title={user.email || ''}>{user.email}</p>
                <span className={`text-xs px-2 py-0.5 rounded-full mt-1 inline-block ${user.enabled ? 'bg-green-800/50 text-green-300' : 'bg-red-800/50 text-red-300'}`}>
                    {user.enabled ? 'Activé' : 'Désactivé'}
                </span>
                 <span className="text-xs px-2 py-0.5 rounded-full mt-1 ml-1 inline-block bg-slate-700 text-gray-300 capitalize">
                    {user.provider}
                 </span>
              </div>
            </div>

            {/* Roles Section (Display or Edit) */}
            <div className="mt-4">
              <h4 className="text-sm font-medium text-gray-400 mb-2">Rôles :</h4>
              {editingUserId === user.id ? (
                // --- EDITING MODE ---
                <div className="space-y-2">
                  {allRoles.map(role => (
                    <label key={role.id} className="flex items-center space-x-2 cursor-pointer text-sm text-gray-300 hover:text-white">
                      <input
                        type="checkbox"
                        className="rounded border-gray-500 text-cyan-600 focus:ring-cyan-500 bg-slate-600"
                        checked={selectedRoles[role.id] || false}
                        onChange={(e) => handleRoleCheckboxChange(role.id, e.target.checked)}
                        disabled={savingUserId === user.id}
                      />
                      <span>{role.name}</span>
                    </label>
                  ))}
                   {/* Display specific saving error here */}
                   {error && savingUserId === user.id && (
                       <p className="mt-2 text-xs text-red-400">{error}</p>
                    )}
                  <div className="flex justify-end gap-2 mt-4 pt-3 border-t border-slate-700">
                    <button
                      onClick={handleCancelClick}
                      disabled={savingUserId === user.id}
                      className="px-3 py-1 rounded-md text-xs bg-slate-600 hover:bg-slate-500 text-gray-200 transition disabled:opacity-50"
                    >
                      Annuler
                    </button>
                    <button
                      onClick={handleSaveRoles}
                      disabled={savingUserId === user.id}
                      className="px-3 py-1 rounded-md text-xs bg-cyan-600 hover:bg-cyan-700 text-white transition disabled:opacity-50 flex items-center"
                    >
                      {savingUserId === user.id ? (
                          <>
                            <svg className="animate-spin -ml-1 mr-1 h-3 w-3 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                            </svg>
                            Sauv...
                          </>
                      ) : (
                          'Sauvegarder'
                      )}
                    </button>
                  </div>
                </div>
              ) : (
                // --- DISPLAY MODE ---
                <div className="flex flex-wrap gap-1 min-h-[40px] items-center"> {/* Min height to prevent layout shifts */}
                  {user.roles.length > 0 ? (
                    user.roles.map(role => (
                      <span key={role.id} className="text-xs font-medium px-2.5 py-0.5 rounded-full bg-cyan-900/70 text-cyan-200 whitespace-nowrap">
                        {role.name}
                      </span>
                    ))
                  ) : (
                    <span className="text-xs italic text-gray-500">Aucun rôle</span>
                  )}
                  {/* Edit Button (only shown if not editing) */}
                   <button
                     onClick={() => handleEditClick(user)}
                     className="ml-auto text-xs text-cyan-400 hover:text-cyan-300 transition"
                     title="Modifier les rôles"
                   >
                      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                          <path strokeLinecap="round" strokeLinejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10" />
                      </svg>
                  </button>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}

// Protéger la page avec le HOC
export default withAuth(AdminUsersPage, { allowedRoles: ['ADMIN'] });


================================================
FILE: src/app/api/admin/roles/route.ts
================================================
// src/app/api/admin/roles/route.ts
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { auth } from '@/app/api/auth/[...nextauth]/route'; // Import configured auth

const prisma = new PrismaClient();

export async function GET() {
  const session = await auth(); // Check session using the exported auth

  // Protect route: Only Admins
  if (!session?.user?.roles?.includes('ADMIN')) {
    return NextResponse.json({ message: 'Accès refusé' }, { status: 403 });
  }

  try {
    const roles = await prisma.role.findMany({
      orderBy: { name: 'asc' }, // Optional: order roles alphabetically
    });
    return NextResponse.json(roles);
  } catch (error) {
    console.error("Erreur lors de la récupération des rôles:", error);
    return NextResponse.json({ message: "Erreur serveur lors de la récupération des rôles." }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}


================================================
FILE: src/app/api/admin/users/route.ts
================================================
// src/app/api/admin/users/route.ts
import { NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { auth } from '@/app/api/auth/[...nextauth]/route'; // Import configured auth

const prisma = new PrismaClient();

export async function GET() {
  const session = await auth(); // Check session

  // Protect route: Only Admins
  if (!session?.user?.roles?.includes('ADMIN')) {
    return NextResponse.json({ message: 'Accès refusé' }, { status: 403 });
  }

  try {
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        image: true, // Include image for potential display
        enabled: true,
        provider: true, // Useful to see how the user signed up
        createdAt: true,
        roles: { // Include related roles
          select: {
            id: true, // Select role ID
            name: true, // Select role name
          },
          orderBy: { // Order roles alphabetically within each user
             name: 'asc'
          }
        },
      },
      orderBy: { // Order users by creation date or name
        createdAt: 'desc',
        // name: 'asc',
      },
    });
    return NextResponse.json(users);
  } catch (error) {
    console.error("Erreur lors de la récupération des utilisateurs:", error);
    return NextResponse.json({ message: "Erreur serveur lors de la récupération des utilisateurs." }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}


================================================
FILE: src/app/api/admin/users/[userId]/route.ts
================================================
// src/app/api/admin/users/[userId]/route.ts
import { NextRequest, NextResponse } from 'next/server';
import { PrismaClient } from '@prisma/client';
import { auth } from '@/app/api/auth/[...nextauth]/route'; // Import configured auth

const prisma = new PrismaClient();

interface UpdateUserRolesBody {
  roleIds?: number[]; // Expect an array of Role IDs
}

// Handler for PUT requests to update roles
export async function PUT(
  request: NextRequest,
  { params }: { params: { userId: string } }
) {
  const session = await auth(); // Check session

  // Protect route: Only Admins
  if (!session?.user?.roles?.includes('ADMIN')) {
    return NextResponse.json({ message: 'Accès refusé' }, { status: 403 });
  }

  const userId = params.userId;
  if (!userId) {
    return NextResponse.json({ message: 'ID utilisateur manquant' }, { status: 400 });
  }

  // Prevent admin from modifying their own roles via this endpoint (optional safety measure)
  if (userId === session.user.id) {
      return NextResponse.json({ message: 'Impossible de modifier vos propres rôles ici' }, { status: 403 });
  }


  try {
    const body = await request.json() as UpdateUserRolesBody;
    const roleIds = body.roleIds; // Expecting an array of numbers

    // Basic validation
    if (!Array.isArray(roleIds)) {
      return NextResponse.json({ message: 'Format de données invalide : roleIds doit être un tableau.' }, { status: 400 });
    }

    // Check if user exists (optional, update will fail anyway but gives better error)
    const userExists = await prisma.user.findUnique({ where: { id: userId } });
    if (!userExists) {
        return NextResponse.json({ message: 'Utilisateur non trouvé' }, { status: 404 });
    }

    // --- Update user roles ---
    // Prisma's `set` operation replaces all existing relations with the provided ones.
    // It expects an array of objects like [{id: 1}, {id: 3}, ...]
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: {
        roles: {
          set: roleIds.map(id => ({ id: id })), // Map the array of IDs to the format Prisma expects
        },
      },
      // Select the updated user data to return (excluding password)
      select: {
        id: true,
        name: true,
        email: true,
        image: true,
        enabled: true,
        provider: true,
        createdAt: true,
        roles: {
          select: {
            id: true,
            name: true,
          },
           orderBy: { name: 'asc' }
        },
      }
    });

    console.log(`Roles updated for user ${userId}`);
    return NextResponse.json(updatedUser);

  } catch (error) {
    console.error(`Erreur lors de la mise à jour des rôles pour l'utilisateur ${userId}:`, error);
     // Handle potential Prisma errors like non-existent role IDs if needed
     if (error instanceof Error && error.message.includes('foreign key constraint')) {
         return NextResponse.json({ message: "Un ou plusieurs ID de rôle fournis sont invalides." }, { status: 400 });
     }
    return NextResponse.json({ message: "Erreur serveur lors de la mise à jour des rôles." }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}


================================================
FILE: src/app/api/auth/[...nextauth]/route.ts
================================================
// src/app/api/auth/[...nextauth]/route.ts
import NextAuth from 'next-auth';
import type { NextAuthConfig } from 'next-auth';
import type { Session } from 'next-auth';
// import type { User as NextAuthUser } from 'next-auth'; // Pas nécessaire ici
import type { AdapterUser } from '@auth/core/adapters';
import GoogleProvider from 'next-auth/providers/google';
import CredentialsProvider from 'next-auth/providers/credentials';
import bcrypt from 'bcryptjs';
import { PrismaAdapter } from '@auth/prisma-adapter';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

// --- Vérification des variables d'environnement essentielles ---
const googleClientId = process.env.GOOGLE_CLIENT_ID;
const googleClientSecret = process.env.GOOGLE_CLIENT_SECRET;
const nextAuthSecret = process.env.NEXTAUTH_SECRET;

if (!googleClientId || !googleClientSecret) {
  console.error("FATAL ERROR: Missing Google OAuth environment variables (GOOGLE_CLIENT_ID or GOOGLE_CLIENT_SECRET)");
  throw new Error('Missing Google OAuth environment variables');
}
if (!nextAuthSecret) {
  // Important: Ne pas logger le secret lui-même en production
  console.error('FATAL ERROR: Missing NEXTAUTH_SECRET environment variable! Authentication will fail.');
  throw new Error('Missing NEXTAUTH_SECRET environment variable');
}

// -------------------------------------------------------------
// Étendre les types pour ajouter nos champs personnalisés
declare module 'next-auth' {
  interface Session {
    user: {
      id: string;
      roles: string[];
      name?: string | null;
      email?: string | null;
      image?: string | null;
    }
  }
  // L'extension User n'est généralement pas nécessaire avec l'adapter si on utilise le callback session
  // interface User {
  //   roles?: string[];
  // }
}

// Définir les options avec le type NextAuthConfig correct
export const authOptions: NextAuthConfig = {
  adapter: PrismaAdapter(prisma),
  providers: [
    GoogleProvider({
      clientId: googleClientId,
      clientSecret: googleClientSecret,
      // allowDangerousEmailAccountLinking: true, // Décommentez si vous voulez lier Google à un compte local existant par email
    }),
    CredentialsProvider({
      name: 'Credentials',
      id: 'credentials',
      credentials: {
        email: { label: "Email", type: "email", placeholder: "votre@email.com" },
        password: { label: "Mot de passe", type: "password" }
      },
      async authorize(credentials): Promise<AdapterUser | null> {
        console.log("Attempting credentials authorization...");

        if (!credentials?.email || !credentials?.password) {
          console.error("Authorize Error: Email or password not provided.");
          // Lancer une erreur ici notifiera NextAuth de l'échec avec "CredentialsSignin"
          throw new Error("Email et mot de passe requis");
          // return null; // Alternativement, retourner null
        }

        const email = credentials.email as string;
        const password = credentials.password as string;

        try {
          const user = await prisma.user.findUnique({
            where: { email: email }
          });

          if (!user || !user.password) {
             console.warn(`Authorize Warning: User not found or no local password set for email: ${email}`);
             // Ne pas révéler si l'email existe ou non pour des raisons de sécurité
             // Lancer une erreur standard pour masquer la raison exacte de l'échec
             throw new Error("Email ou mot de passe invalide.");
             // return null;
          }

          // Vérifier si l'utilisateur est activé (si ce champ est pertinent)
          if (!user.enabled) {
            console.warn(`Authorize Warning: Disabled user login attempt: ${email}`);
            throw new Error("Compte désactivé.");
            // return null;
          }

          const isPasswordValid = await bcrypt.compare(password, user.password);

          if (isPasswordValid) {
            console.log(`Authorize Success: User ${email} authenticated.`);
            // Retourner l'objet utilisateur requis par l'adapter et la session
            // Les rôles seront ajoutés dans le callback `session`.
            return {
              id: user.id,
              email: user.email,
              name: user.name,
              emailVerified: user.emailVerified, // Important pour l'adapter
              image: user.image,
              // NE PAS RETOURNER LE MOT DE PASSE!
            };
          } else {
            console.warn(`Authorize Warning: Invalid password attempt for email: ${email}`);
            throw new Error("Email ou mot de passe invalide.");
            // return null;
          }

        } catch (error) {
           // Si l'erreur est déjà une Error avec un message utilisateur, la relancer
           if (error instanceof Error && ["Email et mot de passe requis", "Email ou mot de passe invalide.", "Compte désactivé."].includes(error.message)) {
             throw error;
           }
           // Pour les autres erreurs (DB, etc.), logguer et lancer une erreur générique
           console.error("Authorize Error: An unexpected error occurred during authorization.", error);
           throw new Error("Une erreur interne est survenue lors de la connexion.");
           // return null;
        }
      }
    })
  ],
  session: {
    // Utilisation de la stratégie de base de données (via PrismaAdapter)
    strategy: 'database',
    // maxAge: 30 * 24 * 60 * 60, // Optionnel : 30 jours
    // updateAge: 24 * 60 * 60, // Optionnel : Mettre à jour la session toutes les 24 heures
  },
  secret: nextAuthSecret, // Assuré non nul par la vérification précédente
  callbacks: {
    // Enrichit la session avec l'ID et les rôles de l'utilisateur
    async session({ session, user }: { session: Session; user: AdapterUser }) {
      // `user` ici est l'utilisateur tel que retourné par l'adapter (après connexion/inscription)
      // ou potentiellement par `authorize` (pour Credentials, bien que l'adapter soit prioritaire si session `database`)
      console.log("Session callback triggered. User from adapter/token:", user);
      if (session?.user && user?.id) { // Vérifier que user.id existe
        session.user.id = user.id;

        try {
            // Récupérer les rôles actuels depuis la DB à chaque création/refresh de session
            const userWithRolesFromDb = await prisma.user.findUnique({
              where: { id: user.id },
              select: {
                roles: {
                  select: { name: true },
                },
              },
            });

            session.user.roles = userWithRolesFromDb?.roles.map((role) => role.name) ?? [];
            console.log("Session callback: User roles assigned:", session.user.roles);
         } catch (dbError) {
             console.error("Session callback: Error fetching roles from DB", dbError);
             session.user.roles = []; // Fallback à un tableau vide en cas d'erreur DB
         }
      } else {
          console.warn("Session callback: session.user or user.id missing.", { hasSessionUser: !!session?.user, hasUserId: !!user?.id });
      }
      return session;
    },

    // Optionnel : Callback signIn pour des vérifications supplémentaires
    async signIn({ user, account, profile }) {
      console.log(`SignIn callback: User: ${user.id}, Account Provider: ${account?.provider}`);
      if (account?.provider === 'google') {
        // Exemple : Vérifier si l'email Google est vérifié
        // Note : `profile` peut varier selon le provider et la config OAuth
        // const googleProfile = profile as { email_verified?: boolean };
        // if (!googleProfile?.email_verified) {
        //   console.log(`Google Sign-In blocked: Email not verified for ${user.email}`);
        //   return false; // Bloquer la connexion si l'email Google n'est pas vérifié
        // }
      }
      if (account?.provider === 'credentials') {
        // La vérification 'enabled' est déjà dans authorize, mais pourrait être redoublée ici si nécessaire
        const dbUser = await prisma.user.findUnique({ where: { id: user.id }, select: { enabled: true } });
        if (dbUser?.enabled === false) {
           console.log(`Sign-in blocked for disabled user: ${user.email}`);
           // Retourner false ici ne fonctionne pas toujours comme prévu pour Credentials avec redirect:false
           // Il est préférable de gérer le blocage dans `authorize` en lançant une erreur.
           // return false;
        }
      }
      return true; // Autoriser la connexion par défaut
    }
  },
  pages: {
    // Pointe vers les pages personnalisées créées
    signIn: '/auth/login',
    // signOut: '/auth/logout', // Page optionnelle après déconnexion
    error: '/auth/login', // Rediriger vers login en cas d'erreur, qui affichera l'erreur
    // verifyRequest: '/auth/verify-request', // Si vous implémentez la vérification d'email
    // newUser: '/auth/new-user' // Page après première connexion OAuth (rarement utilisé)
  },
  debug: process.env.NODE_ENV === 'development',
};

// --- NOUVEL EXPORT RECOMMANDÉ POUR Auth.js v5 / App Router ---
// Initialiser NextAuth avec les options
const { handlers, auth, signIn: authSignIn, signOut: authSignOut } = NextAuth(authOptions);

// Exporter les handlers GET et POST depuis l'objet handlers retourné
export const { GET, POST } = handlers;

// Exporter optionnellement les fonctions utilitaires si utilisées côté serveur ailleurs
export { auth, authSignIn, authSignOut };
// --- FIN DU NOUVEL EXPORT ---


================================================
FILE: src/app/api/auth/register/route.ts
================================================
// src/app/api/auth/register/route.ts
import { NextResponse, NextRequest } from 'next/server';
import { PrismaClient } from '@prisma/client';
import bcrypt from 'bcryptjs';

const prisma = new PrismaClient();
const SALT_ROUNDS = 10; // Standard salt rounds for bcrypt

export async function POST(req: NextRequest) {
  try {
    // 1. Extraire les données du corps de la requête
    const body = await req.json();
    const { email, password, name } = body;

    // 2. Validation simple des entrées
    if (!email || typeof email !== 'string') {
      return NextResponse.json({ message: 'Email invalide ou manquant.' }, { status: 400 });
    }
    if (!password || typeof password !== 'string' || password.length < 6) {
      // Vous pouvez renforcer cette règle (longueur, complexité)
      return NextResponse.json({ message: 'Mot de passe invalide ou trop court (minimum 6 caractères).' }, { status: 400 });
    }
    // Le nom est facultatif ici, mais vous pouvez le rendre obligatoire si nécessaire
    if (name && typeof name !== 'string') {
        return NextResponse.json({ message: 'Nom invalide.' }, { status: 400 });
    }

    // 3. Vérifier si l'utilisateur existe déjà
    const existingUser = await prisma.user.findUnique({
      where: { email: email },
    });

    if (existingUser) {
      return NextResponse.json({ message: 'Un compte avec cet email existe déjà.' }, { status: 409 }); // 409 Conflict
    }

    // 4. Hasher le mot de passe
    const hashedPassword = await bcrypt.hash(password, SALT_ROUNDS);

    // 5. Créer le nouvel utilisateur dans la base de données
    const newUser = await prisma.user.create({
      data: {
        email: email,
        password: hashedPassword,
        name: name || null, // Stocker null si le nom n'est pas fourni
        provider: 'local', // Marquer comme compte local
        enabled: true, // Activer le compte par défaut
        // emailVerified: null, // L'email n'est pas vérifié initialement
        // --- Attribution de rôle par défaut (Optionnel) ---
        // Si vous voulez assigner un rôle par défaut (ex: 'PHYSICIAN') à chaque nouvel inscrit:
        // Assurez-vous que le rôle existe (créé par le seed)
        // roles: {
        //   connect: { name: 'PHYSICIAN' } // Ou l'ID si vous préférez
        // }
        // ---------------------------------------------------
      },
      // Sélectionner les champs à retourner (NE PAS RETOURNER LE MOT DE PASSE)
      select: {
        id: true,
        email: true,
        name: true,
        createdAt: true,
        enabled: true,
        provider: true,
      }
    });

    console.log(`New local user registered: ${newUser.email} (ID: ${newUser.id})`);

    // 6. Retourner une réponse de succès
    return NextResponse.json(newUser, { status: 201 }); // 201 Created

  } catch (error) {
    console.error("Registration Error:", error);
    // Gérer les erreurs potentielles (ex: problème de connexion DB, erreur inattendue)
    // Éviter de divulguer des détails sensibles en production
    let errorMessage = "Une erreur est survenue lors de l'inscription.";
    if (error instanceof Error) {
       // Vous pourriez vouloir logguer error.message côté serveur
       // mais ne pas nécessairement l'envoyer au client
       console.error("Detailed Error:", error.message);
    }

    // Erreur générique pour le client
    return NextResponse.json({ message: errorMessage }, { status: 500 });
  } finally {
     // S'assurer de déconnecter Prisma dans les fonctions serverless
     // Bien que Next.js puisse gérer les connexions, c'est une bonne pratique
     await prisma.$disconnect();
  }
}


================================================
FILE: src/app/auth/login/page.tsx
================================================
// src/app/auth/login/page.tsx
'use client';

import React, { useState, useEffect } from 'react';
import Link from 'next/link';
import { useRouter, useSearchParams } from 'next/navigation'; // Correct imports
import { signIn } from 'next-auth/react';

import AuthLayout from '@/components/auth/AuthLayout';
import Input from '@/components/auth/Input';
import Button from '@/components/auth/Button';
import SocialButton, { GoogleIcon } from '@/components/auth/SocialButton';

// Map NextAuth error keys to user-friendly messages
const errorMessages: { [key: string]: string } = {
  CredentialsSignin: 'Email ou mot de passe invalide.',
  Default: 'Une erreur d\'authentification est survenue.',
  // Add other potential error keys from NextAuth if needed
};

export default function LoginPage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const callbackUrl = searchParams?.get('callbackUrl') || '/'; // Default redirect to home/dashboard
  const signupSuccess = searchParams?.get('signupSuccess');

  const [formData, setFormData] = useState({ email: '', password: '' });
  const [error, setError] = useState<string | null>(null);
  const [successMessage, setSuccessMessage] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);
  const [googleLoading, setGoogleLoading] = useState(false); // Separate loading for Google

  // Display success message on redirect from signup
  useEffect(() => {
    if (signupSuccess) {
      setSuccessMessage('Inscription réussie ! Vous pouvez maintenant vous connecter.');
      // Optional: remove the query param from URL without reloading
      // router.replace('/auth/login', { scroll: false }); // Might need adjustment based on Next version behavior
    }
  }, [signupSuccess, router]);


  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const validateForm = (): boolean => {
    if (!formData.email || !formData.password) {
      setError('Veuillez entrer votre email et votre mot de passe.');
      return false;
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError('Veuillez entrer une adresse email valide.');
      return false;
    }
    setError(null);
    return true;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError(null);
    setSuccessMessage(null); // Clear success message on new attempt

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      const result = await signIn('credentials', {
        redirect: false, // Handle redirect manually
        email: formData.email,
        password: formData.password,
        // callbackUrl: callbackUrl // Can be passed here, but we handle redirect based on result.ok
      });

      if (result?.error) {
        // Map the error key from NextAuth to a friendly message
        const errorMessage = errorMessages[result.error] || errorMessages.Default;
        throw new Error(errorMessage);
      }

      if (result?.ok) {
        // Success
        console.log('Connexion réussie ! Redirection vers:', callbackUrl);
        router.push(callbackUrl); // Redirect to intended page or default
        // router.refresh(); // Might be needed to update session state display in header immediately
      } else {
         // Handle unexpected non-error, non-ok scenario
         throw new Error(errorMessages.Default);
      }

    } catch (err: any) {
      console.error("Login Error:", err);
      setError(err.message || 'Erreur lors de la connexion.');
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignIn = async () => {
    setGoogleLoading(true);
    setError(null);
    setSuccessMessage(null);
    try {
      // No need for redirect: false here, let NextAuth handle Google's redirect flow
      await signIn('google', { callbackUrl });
      // The page might redirect before this line is reached if successful
    } catch (err) {
       console.error("Google Sign-In Error:", err);
       setError("Impossible de se connecter avec Google.");
       setGoogleLoading(false); // Only set loading false if an error occurs before redirect
    }
    // Don't set googleLoading to false here if successful, as the page will navigate away
  };


  return (
    <AuthLayout title="Se connecter">
      <form className="space-y-6" onSubmit={handleSubmit} noValidate>
        {error && (
          <div className="rounded-md border border-red-500/50 bg-red-900/20 p-3 text-center text-sm text-red-400 animate-shake">
            {error}
          </div>
        )}
        {successMessage && (
           <div className="rounded-md border border-green-500/50 bg-green-900/20 p-3 text-center text-sm text-green-400">
             {successMessage}
           </div>
        )}

        <Input
          id="email"
          name="email"
          type="email"
          autoComplete="email"
          required
          placeholder="Adresse email"
          value={formData.email}
          onChange={handleChange}
          disabled={loading || googleLoading}
          hasError={!!error} // Highlight both on generic error
        />
        <Input
          id="password"
          name="password"
          type="password"
          autoComplete="current-password"
          required
          placeholder="Mot de passe"
          value={formData.password}
          onChange={handleChange}
          disabled={loading || googleLoading}
          hasError={!!error} // Highlight both on generic error
        />

        {/* Optional: Add Remember me and Forgot password link here */}
        {/* <div className="flex items-center justify-between">
          <div className="text-sm">
            <a href="#" className="font-medium text-cyan-500 hover:text-cyan-400">
              Mot de passe oublié ?
            </a>
          </div>
        </div> */}

        <div>
          <Button type="submit" loading={loading} disabled={loading || googleLoading}>
            Se connecter
          </Button>
        </div>
      </form>

       {/* Divider */}
       <div className="relative my-6">
         <div className="absolute inset-0 flex items-center" aria-hidden="true">
           <div className="w-full border-t border-slate-600" />
         </div>
         <div className="relative flex justify-center text-sm">
           <span className="bg-slate-800 px-2 text-gray-400">Ou continuer avec</span>
         </div>
       </div>

       {/* Social Login */}
       <div>
         <SocialButton
           providerName="Google"
           icon={<GoogleIcon />}
           onClick={handleGoogleSignIn}
           disabled={loading || googleLoading} // Disable if credential login is loading too
           // Consider adding a loading indicator specific to this button if needed
         />
         {googleLoading && <p className="mt-2 text-center text-xs text-gray-400">Redirection vers Google...</p>}
       </div>


      <div className="mt-6 text-center text-sm">
        <span className="text-gray-400">Pas encore de compte ? </span>
        <Link href="/auth/signup" className="font-medium text-cyan-500 hover:text-cyan-400 transition-colors">
          S'inscrire
        </Link>
      </div>
    </AuthLayout>
  );
}


================================================
FILE: src/app/auth/signup/page.tsx
================================================
// src/app/auth/signup/page.tsx
'use client';

import React, { useState } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation'; // Correct import for App Router
import { signIn } from 'next-auth/react'; // For Google sign in

import AuthLayout from '@/components/auth/AuthLayout';
import Input from '@/components/auth/Input';
import Button from '@/components/auth/Button';
import SocialButton, { GoogleIcon } from '@/components/auth/SocialButton'; // Import icon too

export default function SignupPage() {
  const router = useRouter();
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: '',
    confirmPassword: '',
  });
  const [error, setError] = useState<string | null>(null);
  const [loading, setLoading] = useState(false);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const validateForm = (): boolean => {
    if (!formData.email || !formData.password || !formData.confirmPassword) {
      setError('Veuillez remplir tous les champs obligatoires.');
      return false;
    }
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError('Veuillez entrer une adresse email valide.');
      return false;
    }
    if (formData.password.length < 6) {
      setError('Le mot de passe doit contenir au moins 6 caractères.');
      return false;
    }
    if (formData.password !== formData.confirmPassword) {
      setError('Les mots de passe ne correspondent pas.');
      return false;
    }
    setError(null); // Clear error if validation passes
    return true;
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setError(null); // Clear previous errors

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      const response = await fetch('/api/auth/register', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: formData.name || null, // Send null if empty
          email: formData.email,
          password: formData.password,
        }),
      });

      if (!response.ok) {
        // Attempt to parse error message from backend
        let errorMsg = 'Une erreur est survenue lors de l\'inscription.';
        try {
          const errorData = await response.json();
          errorMsg = errorData.message || errorMsg;
        } catch (parseError) {
          // Ignore if response body is not JSON or empty
        }
        throw new Error(errorMsg);
      }

      // Success
      console.log('Inscription réussie !');
      // Optionally show a success message briefly before redirecting
      router.push('/auth/login?signupSuccess=true'); // Redirect to login

    } catch (err: any) {
      console.error("Signup Error:", err);
      setError(err.message || 'Erreur lors de la connexion au serveur.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <AuthLayout title="Créer votre compte">
      <form className="space-y-6" onSubmit={handleSubmit} noValidate>
        {error && (
          <div className="rounded-md border border-red-500/50 bg-red-900/20 p-3 text-center text-sm text-red-400 animate-shake">
            {error}
          </div>
        )}

        <Input
          id="name"
          name="name"
          type="text"
          autoComplete="name"
          placeholder="Nom (facultatif)"
          value={formData.name}
          onChange={handleChange}
          disabled={loading}
        />
        <Input
          id="email"
          name="email"
          type="email"
          autoComplete="email"
          required
          placeholder="Adresse email"
          value={formData.email}
          onChange={handleChange}
          disabled={loading}
          hasError={!!error && (error.toLowerCase().includes('email') || error.includes('obligatoires'))}
        />
        <Input
          id="password"
          name="password"
          type="password"
          autoComplete="new-password"
          required
          placeholder="Mot de passe (min. 6 caractères)"
          value={formData.password}
          onChange={handleChange}
          disabled={loading}
          hasError={!!error && (error.toLowerCase().includes('passe') || error.includes('obligatoires'))}
        />
        <Input
          id="confirmPassword"
          name="confirmPassword"
          type="password"
          autoComplete="new-password"
          required
          placeholder="Confirmer le mot de passe"
          value={formData.confirmPassword}
          onChange={handleChange}
          disabled={loading}
          hasError={!!error && error.toLowerCase().includes('correspondent pas')}
        />

        <div>
          <Button type="submit" loading={loading} disabled={loading}>
            S'inscrire
          </Button>
        </div>
      </form>

      {/* Divider */}
      <div className="relative my-6">
        <div className="absolute inset-0 flex items-center" aria-hidden="true">
          <div className="w-full border-t border-slate-600" />
        </div>
        <div className="relative flex justify-center text-sm">
          <span className="bg-slate-800 px-2 text-gray-400">Ou continuer avec</span>
        </div>
      </div>

      {/* Social Login */}
      <div>
        <SocialButton
          providerName="Google"
          icon={<GoogleIcon />}
          onClick={() => signIn('google')} // Redirect handled by NextAuth by default
          disabled={loading}
        />
      </div>

      <div className="mt-6 text-center text-sm">
        <span className="text-gray-400">Déjà un compte ? </span>
        <Link href="/auth/login" className="font-medium text-cyan-500 hover:text-cyan-400 transition-colors">
          Se connecter
        </Link>
      </div>
    </AuthLayout>
  );
}


================================================
FILE: src/components/Header.tsx
================================================
// src/components/Header.tsx
'use client'; // Nécessaire pour utiliser useSession

import Link from 'next/link';
import Image from 'next/image';
import { useSession, signIn, signOut } from 'next-auth/react';

export default function Header() {
  const { data: session, status } = useSession();
  const user = session?.user;

  // Fonction pour déterminer la classe de la bordure/badge en fonction du rôle
  const getRoleStyle = (roles: string[] | undefined): string => {
    if (!roles || roles.length === 0) return 'border-gray-500'; // Défaut
    if (roles.includes('ADMIN')) return 'border-red-500 shadow-red-500/50'; // Exemple Admin
    if (roles.includes('RADIOLOGIST')) return 'border-blue-500 shadow-blue-500/50'; // Exemple Radio
    if (roles.includes('TECHNICIAN')) return 'border-green-500 shadow-green-500/50'; // Exemple Tech
    // Ajouter d'autres rôles
    return 'border-gray-500';
  };

  const roleBorderStyle = getRoleStyle(user?.roles);

  return (
    <header className="sticky top-0 z-50 w-full bg-[var(--background)]/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-800">
      <nav className="container mx-auto px-4 md:px-8 h-16 flex items-center justify-between">
        {/* Logo avec animation de lueur */}
        <Link href="/" className="flex items-center gap-2 group">
          {/* Placeholder pour le logo SVG ou Image */}
          <svg /* Votre SVG logo ici */ width="24" height="24" viewBox="0 0 24 24" fill="currentColor" className="text-cyan-500 group-hover:animate-pulse-medical-glow">
             {/* ... chemins svg ... */}
          </svg>
          <span className="font-bold text-lg text-[var(--foreground)]">Orthanc Project</span>
        </Link>

        {/* Authentification / Utilisateur */}
        <div className="flex items-center gap-4">
          {status === 'loading' && (
            // Animation "pulsation cardiaque" minimaliste
            <div className="w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-700 animate-pulse-heartbeat"></div>
          )}

          {status === 'unauthenticated' && (
            <button
              onClick={() => signIn('google')}
              className="px-4 py-2 border border-cyan-500 text-cyan-500 rounded-full text-sm font-medium hover:bg-cyan-500 hover:text-white transition-all duration-300 animate-fade-in" // Animation d'apparition
            >
              Se connecter avec Google
            </button>
          )}

          {status === 'authenticated' && user && (
            <div className="flex items-center gap-3 animate-fade-in">
              {/* Badge/Nom Utilisateur */}
              <span className={`text-sm font-medium px-3 py-1 rounded-full text-white ${roleBorderStyle.replace('border-', 'bg-').split(' ')[0]}`}> {/* Badge coloré */}
                 {user.name || user.email}
              </span>
              {/* Image Profil */}
              {user.image ? (
                 <Image
                   src={user.image}
                   alt={user.name || 'Avatar'}
                   width={32}
                   height={32}
                   className={`rounded-full border-2 ${roleBorderStyle} shadow-md`} // Bordure liée au rôle
                 />
               ) : (
                 <div className={`w-8 h-8 rounded-full border-2 ${roleBorderStyle} bg-gray-300 dark:bg-gray-700 flex items-center justify-center text-sm font-bold text-gray-500 dark:text-gray-300`}>
                   {/* Initiales si pas d'image */}
                   {user.name?.substring(0, 1).toUpperCase() || user.email?.substring(0, 1).toUpperCase()}
                 </div>
              )}
              <button
                onClick={() => signOut()}
                className="text-sm text-gray-600 dark:text-gray-400 hover:text-red-500 transition-colors"
                title="Déconnexion"
              >
                 {/* Icône de déconnexion (ex: SVG) */}
                 <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M15.75 9V5.25A2.25 2.25 0 0 0 13.5 3h-6a2.25 2.25 0 0 0-2.25 2.25v13.5A2.25 2.25 0 0 0 7.5 21h6a2.25 2.25 0 0 0 2.25-2.25V15m3 0 3-3m0 0-3-3m3 3H9" />
                 </svg>
              </button>
            </div>
          )}
        </div>
      </nav>
    </header>
  );
}

// Ajouter les keyframes pour les animations dans globals.css:
// @keyframes pulse-medical-glow { ... }
// @keyframes pulse-heartbeat { ... }
// @keyframes fade-in { ... }


================================================
FILE: src/components/SessionProviderWrapper.tsx
================================================
// src/components/SessionProviderWrapper.tsx
'use client'; // Ce composant doit être un Client Component

import { SessionProvider } from "next-auth/react";
import React from "react";

export default function SessionProviderWrapper({
  children,
}: {
  children: React.ReactNode;
}) {
  // Le SessionProvider fournit le contexte de session aux composants enfants
  return <SessionProvider>{children}</SessionProvider>;
}


================================================
FILE: src/components/withAuth.tsx
================================================
// src/components/withAuth.tsx
'use client';

import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation'; // Utiliser next/navigation dans App Router
import React, { useEffect } from 'react';

// Interface pour définir les rôles autorisés
interface WithAuthProps {
  allowedRoles?: string[];
}

const withAuth = <P extends object>(
  WrappedComponent: React.ComponentType<P>,
  options: WithAuthProps = {}
) => {
  const ComponentWithAuth = (props: P) => {
    const { data: session, status } = useSession();
    const router = useRouter();
    const isLoading = status === 'loading';
    const user = session?.user;
    const userRoles = user?.roles || [];

    useEffect(() => {
      if (isLoading) return; // Attendre la fin du chargement de la session

      if (!user) {
        // Rediriger vers la page de connexion si non authentifié
        // Ajouter ici une animation de transition si souhaité (ex: fondu)
        router.push('/api/auth/signin?callbackUrl=' + encodeURIComponent(window.location.pathname));
        return;
      }

      // Vérifier les rôles si spécifié
      if (options.allowedRoles && options.allowedRoles.length > 0) {
        const hasRequiredRole = options.allowedRoles.some(role => userRoles.includes(role));
        if (!hasRequiredRole) {
          // Rediriger vers une page "accès refusé" ou le dashboard
          // Ajouter ici une animation de transition si souhaité
          console.warn("Accès refusé pour le rôle");
          router.push('/dashboard'); // Ou une page /unauthorized
          return;
        }
      }

    }, [isLoading, user, userRoles, router, options.allowedRoles]);

    // Afficher une animation de "vérification" pendant le chargement ou la redirection initiale
    if (isLoading || !user || (options.allowedRoles && !options.allowedRoles.some(role => userRoles.includes(role)))) {
      return (
        <div className="flex justify-center items-center min-h-screen">
           {/* Placeholder pour l'animation de vérification */}
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-cyan-500"></div>
          <p className="ml-3 text-gray-500">Vérification de l'accès...</p>
        </div>
      );
    }

    // Si authentifié et autorisé, rendre le composant original
    return <WrappedComponent {...props} />;
  };

  return ComponentWithAuth;
};

export default withAuth;

// Utilisation dans une page:
// import withAuth from '@/components/withAuth';
// function ProtectedPage() { ... }
// export default withAuth(ProtectedPage, { allowedRoles: ['ADMIN', 'RADIOLOGIST'] });


================================================
FILE: src/components/auth/AuthLayout.tsx
================================================
// src/components/auth/AuthLayout.tsx
import React from 'react';
import Link from 'next/link';

interface AuthLayoutProps {
  children: React.ReactNode;
  title: string;
}

const AuthLayout: React.FC<AuthLayoutProps> = ({ children, title }) => {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gradient-to-br from-slate-900 via-slate-800 to-black px-4 py-12">
      <div className="w-full max-w-md space-y-8 rounded-2xl bg-slate-800/60 backdrop-blur-md p-8 md:p-10 shadow-2xl border border-slate-700">
        <div>
          {/* Optional: Add Logo Here */}
          {/* <Link href="/" className="flex justify-center mb-4">
            <svg width="32" height="32" viewBox="0 0 24 24" fill="currentColor" className="text-cyan-500">
               ... your logo svg ...
            </svg>
          </Link> */}
          <h2 className="text-center text-3xl font-bold tracking-tight text-white">
            {title}
          </h2>
        </div>
        {children}
      </div>
    </div>
  );
};

export default AuthLayout;


================================================
FILE: src/components/auth/Button.tsx
================================================
// src/components/auth/Button.tsx
import React from 'react';

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  loading?: boolean;
  variant?: 'primary' | 'secondary';
}

const Button: React.FC<ButtonProps> = ({
  children,
  loading = false,
  disabled,
  className,
  variant = 'primary',
  ...props
}) => {
  const baseStyle = "group relative flex w-full justify-center rounded-md px-3 py-2 text-sm font-semibold focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 transition-all duration-300 shadow-md";
  const primaryStyle = "bg-gradient-to-r from-cyan-600 to-blue-600 text-white hover:from-cyan-700 hover:to-blue-700 focus-visible:outline-cyan-600 disabled:opacity-60 disabled:cursor-not-allowed";
  // const secondaryStyle = "bg-transparent border border-cyan-500/50 text-white hover:border-cyan-500 focus-visible:outline-cyan-500 disabled:opacity-50"; // Example secondary

  const combinedClassName = `${baseStyle} ${variant === 'primary' ? primaryStyle : ''} ${className}`;

  return (
    <button
      className={combinedClassName}
      disabled={disabled || loading}
      {...props}
    >
      {loading ? (
        <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
          <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      ) : (
        children
      )}
    </button>
  );
};

export default Button;


================================================
FILE: src/components/auth/Input.tsx
================================================
// src/components/auth/Input.tsx
import React from 'react';

interface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {
  label?: string; // Optional label if needed visually, good for accessibility
  id: string;
  hasError?: boolean; // To style the input differently on error
}

const Input: React.FC<InputProps> = ({ label, id, hasError, className, ...props }) => {
  const baseStyle = "appearance-none relative block w-full rounded-md border px-3 py-2 text-white placeholder-gray-500 focus:z-10 focus:outline-none sm:text-sm";
  const borderStyle = hasError
    ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
    : 'border-slate-600 focus:border-cyan-500 focus:ring-cyan-500';
  const backgroundStyle = 'bg-slate-700/50'; // Slightly transparent background

  return (
    <div>
      {label && (
        <label htmlFor={id} className="sr-only"> {/* Visually hidden label */}
          {label}
        </label>
      )}
      <input
        id={id}
        className={`${baseStyle} ${borderStyle} ${backgroundStyle} ${className}`}
        {...props}
      />
    </div>
  );
};

export default Input;


================================================
FILE: src/components/auth/SocialButton.tsx
================================================
// src/components/auth/SocialButton.tsx
import React from 'react';

interface SocialButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  providerName: string;
  icon: React.ReactNode; // Expecting an SVG element or similar
}

const SocialButton: React.FC<SocialButtonProps> = ({ providerName, icon, className, ...props }) => {
  const baseStyle = "group relative flex w-full items-center justify-center rounded-md border border-slate-600 bg-slate-700/50 px-3 py-2 text-sm font-medium text-white hover:bg-slate-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-slate-500 transition-colors duration-300";

  return (
    <button
      className={`${baseStyle} ${className}`}
      {...props}
    >
      <span className="absolute inset-y-0 left-0 flex items-center pl-3">
        {icon}
      </span>
      Se connecter avec {providerName}
    </button>
  );
};

// Example Google Icon (replace with a proper SVG if you have one)
export const GoogleIcon = () => (
  <svg className="h-5 w-5 text-white group-hover:text-gray-300" aria-hidden="true" fill="currentColor" viewBox="0 0 24 24">
     {/* Basic Google G - Replace with a better SVG */}
    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" />
    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" />
    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z" />
    <path d="M12 5.38c1.63 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" />
    <path fill="none" d="M1 1h22v22H1z" />
  </svg>
);


export default SocialButton;

